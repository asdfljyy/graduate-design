%定义DDT: 索引为输入差分级联输出差分
DDT:ARRAY BITVECTOR(8) OF BITVECTOR(8);
ASSERT(DDT[0bin0000@0bin0000]=0bin00000000);
ASSERT(DDT[0bin0000@0bin0001]=0bin00000001);
ASSERT(DDT[0bin0000@0bin0010]=0bin00000001);
ASSERT(DDT[0bin0000@0bin0011]=0bin00000001);
ASSERT(DDT[0bin0000@0bin0100]=0bin00000001);
ASSERT(DDT[0bin0000@0bin0101]=0bin00000001);
ASSERT(DDT[0bin0000@0bin0110]=0bin00000001);
ASSERT(DDT[0bin0000@0bin0111]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1001]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1010]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1011]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1100]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1101]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1110]=0bin00000001);
ASSERT(DDT[0bin0000@0bin1111]=0bin00000001);
ASSERT(DDT[0bin0001@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0001@0bin0001]=0bin00000010);
ASSERT(DDT[0bin0001@0bin0010]=0bin00000001);
ASSERT(DDT[0bin0001@0bin0011]=0bin00000010);
ASSERT(DDT[0bin0001@0bin0100]=0bin00000001);
ASSERT(DDT[0bin0001@0bin0101]=0bin00000010);
ASSERT(DDT[0bin0001@0bin0110]=0bin00000001);
ASSERT(DDT[0bin0001@0bin0111]=0bin00000010);
ASSERT(DDT[0bin0001@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1001]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1010]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1011]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1100]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1101]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1110]=0bin00000001);
ASSERT(DDT[0bin0001@0bin1111]=0bin00000001);
ASSERT(DDT[0bin0010@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0010@0bin0001]=0bin00000001);
ASSERT(DDT[0bin0010@0bin0010]=0bin00000010);
ASSERT(DDT[0bin0010@0bin0011]=0bin00000001);
ASSERT(DDT[0bin0010@0bin0100]=0bin00000001);
ASSERT(DDT[0bin0010@0bin0101]=0bin00000001);
ASSERT(DDT[0bin0010@0bin0110]=0bin00000010);
ASSERT(DDT[0bin0010@0bin0111]=0bin00000001);
ASSERT(DDT[0bin0010@0bin1000]=0bin00000010);
ASSERT(DDT[0bin0010@0bin1001]=0bin00000001);
ASSERT(DDT[0bin0010@0bin1010]=0bin00000001);
ASSERT(DDT[0bin0010@0bin1011]=0bin00000001);
ASSERT(DDT[0bin0010@0bin1100]=0bin00000001);
ASSERT(DDT[0bin0010@0bin1101]=0bin00000001);
ASSERT(DDT[0bin0010@0bin1110]=0bin00000010);
ASSERT(DDT[0bin0010@0bin1111]=0bin00000001);
ASSERT(DDT[0bin0011@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0011@0bin0001]=0bin00000011);
ASSERT(DDT[0bin0011@0bin0010]=0bin00000001);
ASSERT(DDT[0bin0011@0bin0011]=0bin00000011);
ASSERT(DDT[0bin0011@0bin0100]=0bin00000001);
ASSERT(DDT[0bin0011@0bin0101]=0bin00000011);
ASSERT(DDT[0bin0011@0bin0110]=0bin00000001);
ASSERT(DDT[0bin0011@0bin0111]=0bin00000011);
ASSERT(DDT[0bin0011@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0011@0bin1001]=0bin00000011);
ASSERT(DDT[0bin0011@0bin1010]=0bin00000001);
ASSERT(DDT[0bin0011@0bin1011]=0bin00000011);
ASSERT(DDT[0bin0011@0bin1100]=0bin00000001);
ASSERT(DDT[0bin0011@0bin1101]=0bin00000011);
ASSERT(DDT[0bin0011@0bin1110]=0bin00000001);
ASSERT(DDT[0bin0011@0bin1111]=0bin00000011);
ASSERT(DDT[0bin0100@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0100@0bin0001]=0bin00000001);
ASSERT(DDT[0bin0100@0bin0010]=0bin00000001);
ASSERT(DDT[0bin0100@0bin0011]=0bin00000010);
ASSERT(DDT[0bin0100@0bin0100]=0bin00000010);
ASSERT(DDT[0bin0100@0bin0101]=0bin00000001);
ASSERT(DDT[0bin0100@0bin0110]=0bin00000001);
ASSERT(DDT[0bin0100@0bin0111]=0bin00000001);
ASSERT(DDT[0bin0100@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0100@0bin1001]=0bin00000001);
ASSERT(DDT[0bin0100@0bin1010]=0bin00000001);
ASSERT(DDT[0bin0100@0bin1011]=0bin00000001);
ASSERT(DDT[0bin0100@0bin1100]=0bin00000011);
ASSERT(DDT[0bin0100@0bin1101]=0bin00000011);
ASSERT(DDT[0bin0100@0bin1110]=0bin00000011);
ASSERT(DDT[0bin0100@0bin1111]=0bin00000011);
ASSERT(DDT[0bin0101@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0101@0bin0001]=0bin00000010);
ASSERT(DDT[0bin0101@0bin0010]=0bin00000001);
ASSERT(DDT[0bin0101@0bin0011]=0bin00000001);
ASSERT(DDT[0bin0101@0bin0100]=0bin00000010);
ASSERT(DDT[0bin0101@0bin0101]=0bin00000001);
ASSERT(DDT[0bin0101@0bin0110]=0bin00000001);
ASSERT(DDT[0bin0101@0bin0111]=0bin00000001);
ASSERT(DDT[0bin0101@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0101@0bin1001]=0bin00000001);
ASSERT(DDT[0bin0101@0bin1010]=0bin00000001);
ASSERT(DDT[0bin0101@0bin1011]=0bin00000001);
ASSERT(DDT[0bin0101@0bin1100]=0bin00000011);
ASSERT(DDT[0bin0101@0bin1101]=0bin00000011);
ASSERT(DDT[0bin0101@0bin1110]=0bin00000011);
ASSERT(DDT[0bin0101@0bin1111]=0bin00000011);
ASSERT(DDT[0bin0110@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0110@0bin0001]=0bin00000011);
ASSERT(DDT[0bin0110@0bin0010]=0bin00000011);
ASSERT(DDT[0bin0110@0bin0011]=0bin00000001);
ASSERT(DDT[0bin0110@0bin0100]=0bin00000001);
ASSERT(DDT[0bin0110@0bin0101]=0bin00000011);
ASSERT(DDT[0bin0110@0bin0110]=0bin00000011);
ASSERT(DDT[0bin0110@0bin0111]=0bin00000001);
ASSERT(DDT[0bin0110@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0110@0bin1001]=0bin00000001);
ASSERT(DDT[0bin0110@0bin1010]=0bin00000011);
ASSERT(DDT[0bin0110@0bin1011]=0bin00000011);
ASSERT(DDT[0bin0110@0bin1100]=0bin00000011);
ASSERT(DDT[0bin0110@0bin1101]=0bin00000011);
ASSERT(DDT[0bin0110@0bin1110]=0bin00000001);
ASSERT(DDT[0bin0110@0bin1111]=0bin00000001);
ASSERT(DDT[0bin0111@0bin0000]=0bin00000001);
ASSERT(DDT[0bin0111@0bin0001]=0bin00000001);
ASSERT(DDT[0bin0111@0bin0010]=0bin00000011);
ASSERT(DDT[0bin0111@0bin0011]=0bin00000011);
ASSERT(DDT[0bin0111@0bin0100]=0bin00000001);
ASSERT(DDT[0bin0111@0bin0101]=0bin00000001);
ASSERT(DDT[0bin0111@0bin0110]=0bin00000011);
ASSERT(DDT[0bin0111@0bin0111]=0bin00000011);
ASSERT(DDT[0bin0111@0bin1000]=0bin00000001);
ASSERT(DDT[0bin0111@0bin1001]=0bin00000011);
ASSERT(DDT[0bin0111@0bin1010]=0bin00000011);
ASSERT(DDT[0bin0111@0bin1011]=0bin00000001);
ASSERT(DDT[0bin0111@0bin1100]=0bin00000011);
ASSERT(DDT[0bin0111@0bin1101]=0bin00000001);
ASSERT(DDT[0bin0111@0bin1110]=0bin00000001);
ASSERT(DDT[0bin0111@0bin1111]=0bin00000011);
ASSERT(DDT[0bin1000@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0001]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0010]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0011]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0100]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0101]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0110]=0bin00000001);
ASSERT(DDT[0bin1000@0bin0111]=0bin00000001);
ASSERT(DDT[0bin1000@0bin1000]=0bin00000010);
ASSERT(DDT[0bin1000@0bin1001]=0bin00000011);
ASSERT(DDT[0bin1000@0bin1010]=0bin00000010);
ASSERT(DDT[0bin1000@0bin1011]=0bin00000011);
ASSERT(DDT[0bin1000@0bin1100]=0bin00000001);
ASSERT(DDT[0bin1000@0bin1101]=0bin00000011);
ASSERT(DDT[0bin1000@0bin1110]=0bin00000001);
ASSERT(DDT[0bin1000@0bin1111]=0bin00000011);
ASSERT(DDT[0bin1001@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0001]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0010]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0011]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0100]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0101]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0110]=0bin00000001);
ASSERT(DDT[0bin1001@0bin0111]=0bin00000001);
ASSERT(DDT[0bin1001@0bin1000]=0bin00000010);
ASSERT(DDT[0bin1001@0bin1001]=0bin00000011);
ASSERT(DDT[0bin1001@0bin1010]=0bin00000010);
ASSERT(DDT[0bin1001@0bin1011]=0bin00000011);
ASSERT(DDT[0bin1001@0bin1100]=0bin00000001);
ASSERT(DDT[0bin1001@0bin1101]=0bin00000011);
ASSERT(DDT[0bin1001@0bin1110]=0bin00000001);
ASSERT(DDT[0bin1001@0bin1111]=0bin00000011);
ASSERT(DDT[0bin1010@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1010@0bin0001]=0bin00000001);
ASSERT(DDT[0bin1010@0bin0010]=0bin00000010);
ASSERT(DDT[0bin1010@0bin0011]=0bin00000001);
ASSERT(DDT[0bin1010@0bin0100]=0bin00000001);
ASSERT(DDT[0bin1010@0bin0101]=0bin00000001);
ASSERT(DDT[0bin1010@0bin0110]=0bin00000010);
ASSERT(DDT[0bin1010@0bin0111]=0bin00000001);
ASSERT(DDT[0bin1010@0bin1000]=0bin00000001);
ASSERT(DDT[0bin1010@0bin1001]=0bin00000011);
ASSERT(DDT[0bin1010@0bin1010]=0bin00000001);
ASSERT(DDT[0bin1010@0bin1011]=0bin00000011);
ASSERT(DDT[0bin1010@0bin1100]=0bin00000001);
ASSERT(DDT[0bin1010@0bin1101]=0bin00000011);
ASSERT(DDT[0bin1010@0bin1110]=0bin00000001);
ASSERT(DDT[0bin1010@0bin1111]=0bin00000011);
ASSERT(DDT[0bin1011@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1011@0bin0001]=0bin00000011);
ASSERT(DDT[0bin1011@0bin0010]=0bin00000001);
ASSERT(DDT[0bin1011@0bin0011]=0bin00000011);
ASSERT(DDT[0bin1011@0bin0100]=0bin00000001);
ASSERT(DDT[0bin1011@0bin0101]=0bin00000011);
ASSERT(DDT[0bin1011@0bin0110]=0bin00000001);
ASSERT(DDT[0bin1011@0bin0111]=0bin00000011);
ASSERT(DDT[0bin1011@0bin1000]=0bin00000010);
ASSERT(DDT[0bin1011@0bin1001]=0bin00000001);
ASSERT(DDT[0bin1011@0bin1010]=0bin00000001);
ASSERT(DDT[0bin1011@0bin1011]=0bin00000001);
ASSERT(DDT[0bin1011@0bin1100]=0bin00000001);
ASSERT(DDT[0bin1011@0bin1101]=0bin00000001);
ASSERT(DDT[0bin1011@0bin1110]=0bin00000010);
ASSERT(DDT[0bin1011@0bin1111]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0001]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0010]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0011]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0100]=0bin00000010);
ASSERT(DDT[0bin1100@0bin0101]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0110]=0bin00000001);
ASSERT(DDT[0bin1100@0bin0111]=0bin00000010);
ASSERT(DDT[0bin1100@0bin1000]=0bin00000001);
ASSERT(DDT[0bin1100@0bin1001]=0bin00000011);
ASSERT(DDT[0bin1100@0bin1010]=0bin00000001);
ASSERT(DDT[0bin1100@0bin1011]=0bin00000011);
ASSERT(DDT[0bin1100@0bin1100]=0bin00000011);
ASSERT(DDT[0bin1100@0bin1101]=0bin00000001);
ASSERT(DDT[0bin1100@0bin1110]=0bin00000011);
ASSERT(DDT[0bin1100@0bin1111]=0bin00000001);
ASSERT(DDT[0bin1101@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1101@0bin0001]=0bin00000001);
ASSERT(DDT[0bin1101@0bin0010]=0bin00000001);
ASSERT(DDT[0bin1101@0bin0011]=0bin00000001);
ASSERT(DDT[0bin1101@0bin0100]=0bin00000010);
ASSERT(DDT[0bin1101@0bin0101]=0bin00000010);
ASSERT(DDT[0bin1101@0bin0110]=0bin00000001);
ASSERT(DDT[0bin1101@0bin0111]=0bin00000001);
ASSERT(DDT[0bin1101@0bin1000]=0bin00000001);
ASSERT(DDT[0bin1101@0bin1001]=0bin00000011);
ASSERT(DDT[0bin1101@0bin1010]=0bin00000001);
ASSERT(DDT[0bin1101@0bin1011]=0bin00000011);
ASSERT(DDT[0bin1101@0bin1100]=0bin00000011);
ASSERT(DDT[0bin1101@0bin1101]=0bin00000001);
ASSERT(DDT[0bin1101@0bin1110]=0bin00000011);
ASSERT(DDT[0bin1101@0bin1111]=0bin00000001);
ASSERT(DDT[0bin1110@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1110@0bin0001]=0bin00000011);
ASSERT(DDT[0bin1110@0bin0010]=0bin00000011);
ASSERT(DDT[0bin1110@0bin0011]=0bin00000001);
ASSERT(DDT[0bin1110@0bin0100]=0bin00000001);
ASSERT(DDT[0bin1110@0bin0101]=0bin00000011);
ASSERT(DDT[0bin1110@0bin0110]=0bin00000011);
ASSERT(DDT[0bin1110@0bin0111]=0bin00000001);
ASSERT(DDT[0bin1110@0bin1000]=0bin00000001);
ASSERT(DDT[0bin1110@0bin1001]=0bin00000011);
ASSERT(DDT[0bin1110@0bin1010]=0bin00000011);
ASSERT(DDT[0bin1110@0bin1011]=0bin00000001);
ASSERT(DDT[0bin1110@0bin1100]=0bin00000011);
ASSERT(DDT[0bin1110@0bin1101]=0bin00000001);
ASSERT(DDT[0bin1110@0bin1110]=0bin00000001);
ASSERT(DDT[0bin1110@0bin1111]=0bin00000011);
ASSERT(DDT[0bin1111@0bin0000]=0bin00000001);
ASSERT(DDT[0bin1111@0bin0001]=0bin00000001);
ASSERT(DDT[0bin1111@0bin0010]=0bin00000011);
ASSERT(DDT[0bin1111@0bin0011]=0bin00000011);
ASSERT(DDT[0bin1111@0bin0100]=0bin00000001);
ASSERT(DDT[0bin1111@0bin0101]=0bin00000001);
ASSERT(DDT[0bin1111@0bin0110]=0bin00000011);
ASSERT(DDT[0bin1111@0bin0111]=0bin00000011);
ASSERT(DDT[0bin1111@0bin1000]=0bin00000001);
ASSERT(DDT[0bin1111@0bin1001]=0bin00000001);
ASSERT(DDT[0bin1111@0bin1010]=0bin00000011);
ASSERT(DDT[0bin1111@0bin1011]=0bin00000011);
ASSERT(DDT[0bin1111@0bin1100]=0bin00000011);
ASSERT(DDT[0bin1111@0bin1101]=0bin00000011);
ASSERT(DDT[0bin1111@0bin1110]=0bin00000001);
ASSERT(DDT[0bin1111@0bin1111]=0bin00000001);
counts:BITVECTOR(8);
PR:BITVECTOR(8);
delta_in_0:BITVECTOR(128);
delta_out_0:BITVECTOR(128);
count_0:BITVECTOR(8);
P_0:BITVECTOR(8);
X1_0_ls4:BITVECTOR(64);
X0_0_ls8:BITVECTOR(64);
X1_0_ls8:BITVECTOR(64);
X0_0_ls20:BITVECTOR(64);
delta_in_1:BITVECTOR(128);
delta_out_1:BITVECTOR(128);
count_1:BITVECTOR(8);
P_1:BITVECTOR(8);
X1_1_ls4:BITVECTOR(64);
X0_1_ls8:BITVECTOR(64);
X1_1_ls8:BITVECTOR(64);
X0_1_ls20:BITVECTOR(64);
delta_in_2:BITVECTOR(128);
delta_out_2:BITVECTOR(128);
count_2:BITVECTOR(8);
P_2:BITVECTOR(8);
X1_2_ls4:BITVECTOR(64);
X0_2_ls8:BITVECTOR(64);
X1_2_ls8:BITVECTOR(64);
X0_2_ls20:BITVECTOR(64);
delta_in_3:BITVECTOR(128);
delta_out_3:BITVECTOR(128);
count_3:BITVECTOR(8);
P_3:BITVECTOR(8);
X1_3_ls4:BITVECTOR(64);
X0_3_ls8:BITVECTOR(64);
X1_3_ls8:BITVECTOR(64);
X0_3_ls20:BITVECTOR(64);
SIN_0_0:BITVECTOR(4);
SOUT_0_0:BITVECTOR(4);
SAT_0_0:BITVECTOR(8);
PB_0_0:BITVECTOR(8);
SIN_0_1:BITVECTOR(4);
SOUT_0_1:BITVECTOR(4);
SAT_0_1:BITVECTOR(8);
PB_0_1:BITVECTOR(8);
SIN_0_2:BITVECTOR(4);
SOUT_0_2:BITVECTOR(4);
SAT_0_2:BITVECTOR(8);
PB_0_2:BITVECTOR(8);
SIN_0_3:BITVECTOR(4);
SOUT_0_3:BITVECTOR(4);
SAT_0_3:BITVECTOR(8);
PB_0_3:BITVECTOR(8);
SIN_0_4:BITVECTOR(4);
SOUT_0_4:BITVECTOR(4);
SAT_0_4:BITVECTOR(8);
PB_0_4:BITVECTOR(8);
SIN_0_5:BITVECTOR(4);
SOUT_0_5:BITVECTOR(4);
SAT_0_5:BITVECTOR(8);
PB_0_5:BITVECTOR(8);
SIN_0_6:BITVECTOR(4);
SOUT_0_6:BITVECTOR(4);
SAT_0_6:BITVECTOR(8);
PB_0_6:BITVECTOR(8);
SIN_0_7:BITVECTOR(4);
SOUT_0_7:BITVECTOR(4);
SAT_0_7:BITVECTOR(8);
PB_0_7:BITVECTOR(8);
SIN_0_8:BITVECTOR(4);
SOUT_0_8:BITVECTOR(4);
SAT_0_8:BITVECTOR(8);
PB_0_8:BITVECTOR(8);
SIN_0_9:BITVECTOR(4);
SOUT_0_9:BITVECTOR(4);
SAT_0_9:BITVECTOR(8);
PB_0_9:BITVECTOR(8);
SIN_0_10:BITVECTOR(4);
SOUT_0_10:BITVECTOR(4);
SAT_0_10:BITVECTOR(8);
PB_0_10:BITVECTOR(8);
SIN_0_11:BITVECTOR(4);
SOUT_0_11:BITVECTOR(4);
SAT_0_11:BITVECTOR(8);
PB_0_11:BITVECTOR(8);
SIN_0_12:BITVECTOR(4);
SOUT_0_12:BITVECTOR(4);
SAT_0_12:BITVECTOR(8);
PB_0_12:BITVECTOR(8);
SIN_0_13:BITVECTOR(4);
SOUT_0_13:BITVECTOR(4);
SAT_0_13:BITVECTOR(8);
PB_0_13:BITVECTOR(8);
SIN_0_14:BITVECTOR(4);
SOUT_0_14:BITVECTOR(4);
SAT_0_14:BITVECTOR(8);
PB_0_14:BITVECTOR(8);
SIN_0_15:BITVECTOR(4);
SOUT_0_15:BITVECTOR(4);
SAT_0_15:BITVECTOR(8);
PB_0_15:BITVECTOR(8);
SIN_0_16:BITVECTOR(4);
SOUT_0_16:BITVECTOR(4);
SAT_0_16:BITVECTOR(8);
PB_0_16:BITVECTOR(8);
SIN_0_17:BITVECTOR(4);
SOUT_0_17:BITVECTOR(4);
SAT_0_17:BITVECTOR(8);
PB_0_17:BITVECTOR(8);
SIN_0_18:BITVECTOR(4);
SOUT_0_18:BITVECTOR(4);
SAT_0_18:BITVECTOR(8);
PB_0_18:BITVECTOR(8);
SIN_0_19:BITVECTOR(4);
SOUT_0_19:BITVECTOR(4);
SAT_0_19:BITVECTOR(8);
PB_0_19:BITVECTOR(8);
SIN_0_20:BITVECTOR(4);
SOUT_0_20:BITVECTOR(4);
SAT_0_20:BITVECTOR(8);
PB_0_20:BITVECTOR(8);
SIN_0_21:BITVECTOR(4);
SOUT_0_21:BITVECTOR(4);
SAT_0_21:BITVECTOR(8);
PB_0_21:BITVECTOR(8);
SIN_0_22:BITVECTOR(4);
SOUT_0_22:BITVECTOR(4);
SAT_0_22:BITVECTOR(8);
PB_0_22:BITVECTOR(8);
SIN_0_23:BITVECTOR(4);
SOUT_0_23:BITVECTOR(4);
SAT_0_23:BITVECTOR(8);
PB_0_23:BITVECTOR(8);
SIN_0_24:BITVECTOR(4);
SOUT_0_24:BITVECTOR(4);
SAT_0_24:BITVECTOR(8);
PB_0_24:BITVECTOR(8);
SIN_0_25:BITVECTOR(4);
SOUT_0_25:BITVECTOR(4);
SAT_0_25:BITVECTOR(8);
PB_0_25:BITVECTOR(8);
SIN_0_26:BITVECTOR(4);
SOUT_0_26:BITVECTOR(4);
SAT_0_26:BITVECTOR(8);
PB_0_26:BITVECTOR(8);
SIN_0_27:BITVECTOR(4);
SOUT_0_27:BITVECTOR(4);
SAT_0_27:BITVECTOR(8);
PB_0_27:BITVECTOR(8);
SIN_0_28:BITVECTOR(4);
SOUT_0_28:BITVECTOR(4);
SAT_0_28:BITVECTOR(8);
PB_0_28:BITVECTOR(8);
SIN_0_29:BITVECTOR(4);
SOUT_0_29:BITVECTOR(4);
SAT_0_29:BITVECTOR(8);
PB_0_29:BITVECTOR(8);
SIN_0_30:BITVECTOR(4);
SOUT_0_30:BITVECTOR(4);
SAT_0_30:BITVECTOR(8);
PB_0_30:BITVECTOR(8);
SIN_0_31:BITVECTOR(4);
SOUT_0_31:BITVECTOR(4);
SAT_0_31:BITVECTOR(8);
PB_0_31:BITVECTOR(8);
SIN_1_0:BITVECTOR(4);
SOUT_1_0:BITVECTOR(4);
SAT_1_0:BITVECTOR(8);
PB_1_0:BITVECTOR(8);
SIN_1_1:BITVECTOR(4);
SOUT_1_1:BITVECTOR(4);
SAT_1_1:BITVECTOR(8);
PB_1_1:BITVECTOR(8);
SIN_1_2:BITVECTOR(4);
SOUT_1_2:BITVECTOR(4);
SAT_1_2:BITVECTOR(8);
PB_1_2:BITVECTOR(8);
SIN_1_3:BITVECTOR(4);
SOUT_1_3:BITVECTOR(4);
SAT_1_3:BITVECTOR(8);
PB_1_3:BITVECTOR(8);
SIN_1_4:BITVECTOR(4);
SOUT_1_4:BITVECTOR(4);
SAT_1_4:BITVECTOR(8);
PB_1_4:BITVECTOR(8);
SIN_1_5:BITVECTOR(4);
SOUT_1_5:BITVECTOR(4);
SAT_1_5:BITVECTOR(8);
PB_1_5:BITVECTOR(8);
SIN_1_6:BITVECTOR(4);
SOUT_1_6:BITVECTOR(4);
SAT_1_6:BITVECTOR(8);
PB_1_6:BITVECTOR(8);
SIN_1_7:BITVECTOR(4);
SOUT_1_7:BITVECTOR(4);
SAT_1_7:BITVECTOR(8);
PB_1_7:BITVECTOR(8);
SIN_1_8:BITVECTOR(4);
SOUT_1_8:BITVECTOR(4);
SAT_1_8:BITVECTOR(8);
PB_1_8:BITVECTOR(8);
SIN_1_9:BITVECTOR(4);
SOUT_1_9:BITVECTOR(4);
SAT_1_9:BITVECTOR(8);
PB_1_9:BITVECTOR(8);
SIN_1_10:BITVECTOR(4);
SOUT_1_10:BITVECTOR(4);
SAT_1_10:BITVECTOR(8);
PB_1_10:BITVECTOR(8);
SIN_1_11:BITVECTOR(4);
SOUT_1_11:BITVECTOR(4);
SAT_1_11:BITVECTOR(8);
PB_1_11:BITVECTOR(8);
SIN_1_12:BITVECTOR(4);
SOUT_1_12:BITVECTOR(4);
SAT_1_12:BITVECTOR(8);
PB_1_12:BITVECTOR(8);
SIN_1_13:BITVECTOR(4);
SOUT_1_13:BITVECTOR(4);
SAT_1_13:BITVECTOR(8);
PB_1_13:BITVECTOR(8);
SIN_1_14:BITVECTOR(4);
SOUT_1_14:BITVECTOR(4);
SAT_1_14:BITVECTOR(8);
PB_1_14:BITVECTOR(8);
SIN_1_15:BITVECTOR(4);
SOUT_1_15:BITVECTOR(4);
SAT_1_15:BITVECTOR(8);
PB_1_15:BITVECTOR(8);
SIN_1_16:BITVECTOR(4);
SOUT_1_16:BITVECTOR(4);
SAT_1_16:BITVECTOR(8);
PB_1_16:BITVECTOR(8);
SIN_1_17:BITVECTOR(4);
SOUT_1_17:BITVECTOR(4);
SAT_1_17:BITVECTOR(8);
PB_1_17:BITVECTOR(8);
SIN_1_18:BITVECTOR(4);
SOUT_1_18:BITVECTOR(4);
SAT_1_18:BITVECTOR(8);
PB_1_18:BITVECTOR(8);
SIN_1_19:BITVECTOR(4);
SOUT_1_19:BITVECTOR(4);
SAT_1_19:BITVECTOR(8);
PB_1_19:BITVECTOR(8);
SIN_1_20:BITVECTOR(4);
SOUT_1_20:BITVECTOR(4);
SAT_1_20:BITVECTOR(8);
PB_1_20:BITVECTOR(8);
SIN_1_21:BITVECTOR(4);
SOUT_1_21:BITVECTOR(4);
SAT_1_21:BITVECTOR(8);
PB_1_21:BITVECTOR(8);
SIN_1_22:BITVECTOR(4);
SOUT_1_22:BITVECTOR(4);
SAT_1_22:BITVECTOR(8);
PB_1_22:BITVECTOR(8);
SIN_1_23:BITVECTOR(4);
SOUT_1_23:BITVECTOR(4);
SAT_1_23:BITVECTOR(8);
PB_1_23:BITVECTOR(8);
SIN_1_24:BITVECTOR(4);
SOUT_1_24:BITVECTOR(4);
SAT_1_24:BITVECTOR(8);
PB_1_24:BITVECTOR(8);
SIN_1_25:BITVECTOR(4);
SOUT_1_25:BITVECTOR(4);
SAT_1_25:BITVECTOR(8);
PB_1_25:BITVECTOR(8);
SIN_1_26:BITVECTOR(4);
SOUT_1_26:BITVECTOR(4);
SAT_1_26:BITVECTOR(8);
PB_1_26:BITVECTOR(8);
SIN_1_27:BITVECTOR(4);
SOUT_1_27:BITVECTOR(4);
SAT_1_27:BITVECTOR(8);
PB_1_27:BITVECTOR(8);
SIN_1_28:BITVECTOR(4);
SOUT_1_28:BITVECTOR(4);
SAT_1_28:BITVECTOR(8);
PB_1_28:BITVECTOR(8);
SIN_1_29:BITVECTOR(4);
SOUT_1_29:BITVECTOR(4);
SAT_1_29:BITVECTOR(8);
PB_1_29:BITVECTOR(8);
SIN_1_30:BITVECTOR(4);
SOUT_1_30:BITVECTOR(4);
SAT_1_30:BITVECTOR(8);
PB_1_30:BITVECTOR(8);
SIN_1_31:BITVECTOR(4);
SOUT_1_31:BITVECTOR(4);
SAT_1_31:BITVECTOR(8);
PB_1_31:BITVECTOR(8);
SIN_2_0:BITVECTOR(4);
SOUT_2_0:BITVECTOR(4);
SAT_2_0:BITVECTOR(8);
PB_2_0:BITVECTOR(8);
SIN_2_1:BITVECTOR(4);
SOUT_2_1:BITVECTOR(4);
SAT_2_1:BITVECTOR(8);
PB_2_1:BITVECTOR(8);
SIN_2_2:BITVECTOR(4);
SOUT_2_2:BITVECTOR(4);
SAT_2_2:BITVECTOR(8);
PB_2_2:BITVECTOR(8);
SIN_2_3:BITVECTOR(4);
SOUT_2_3:BITVECTOR(4);
SAT_2_3:BITVECTOR(8);
PB_2_3:BITVECTOR(8);
SIN_2_4:BITVECTOR(4);
SOUT_2_4:BITVECTOR(4);
SAT_2_4:BITVECTOR(8);
PB_2_4:BITVECTOR(8);
SIN_2_5:BITVECTOR(4);
SOUT_2_5:BITVECTOR(4);
SAT_2_5:BITVECTOR(8);
PB_2_5:BITVECTOR(8);
SIN_2_6:BITVECTOR(4);
SOUT_2_6:BITVECTOR(4);
SAT_2_6:BITVECTOR(8);
PB_2_6:BITVECTOR(8);
SIN_2_7:BITVECTOR(4);
SOUT_2_7:BITVECTOR(4);
SAT_2_7:BITVECTOR(8);
PB_2_7:BITVECTOR(8);
SIN_2_8:BITVECTOR(4);
SOUT_2_8:BITVECTOR(4);
SAT_2_8:BITVECTOR(8);
PB_2_8:BITVECTOR(8);
SIN_2_9:BITVECTOR(4);
SOUT_2_9:BITVECTOR(4);
SAT_2_9:BITVECTOR(8);
PB_2_9:BITVECTOR(8);
SIN_2_10:BITVECTOR(4);
SOUT_2_10:BITVECTOR(4);
SAT_2_10:BITVECTOR(8);
PB_2_10:BITVECTOR(8);
SIN_2_11:BITVECTOR(4);
SOUT_2_11:BITVECTOR(4);
SAT_2_11:BITVECTOR(8);
PB_2_11:BITVECTOR(8);
SIN_2_12:BITVECTOR(4);
SOUT_2_12:BITVECTOR(4);
SAT_2_12:BITVECTOR(8);
PB_2_12:BITVECTOR(8);
SIN_2_13:BITVECTOR(4);
SOUT_2_13:BITVECTOR(4);
SAT_2_13:BITVECTOR(8);
PB_2_13:BITVECTOR(8);
SIN_2_14:BITVECTOR(4);
SOUT_2_14:BITVECTOR(4);
SAT_2_14:BITVECTOR(8);
PB_2_14:BITVECTOR(8);
SIN_2_15:BITVECTOR(4);
SOUT_2_15:BITVECTOR(4);
SAT_2_15:BITVECTOR(8);
PB_2_15:BITVECTOR(8);
SIN_2_16:BITVECTOR(4);
SOUT_2_16:BITVECTOR(4);
SAT_2_16:BITVECTOR(8);
PB_2_16:BITVECTOR(8);
SIN_2_17:BITVECTOR(4);
SOUT_2_17:BITVECTOR(4);
SAT_2_17:BITVECTOR(8);
PB_2_17:BITVECTOR(8);
SIN_2_18:BITVECTOR(4);
SOUT_2_18:BITVECTOR(4);
SAT_2_18:BITVECTOR(8);
PB_2_18:BITVECTOR(8);
SIN_2_19:BITVECTOR(4);
SOUT_2_19:BITVECTOR(4);
SAT_2_19:BITVECTOR(8);
PB_2_19:BITVECTOR(8);
SIN_2_20:BITVECTOR(4);
SOUT_2_20:BITVECTOR(4);
SAT_2_20:BITVECTOR(8);
PB_2_20:BITVECTOR(8);
SIN_2_21:BITVECTOR(4);
SOUT_2_21:BITVECTOR(4);
SAT_2_21:BITVECTOR(8);
PB_2_21:BITVECTOR(8);
SIN_2_22:BITVECTOR(4);
SOUT_2_22:BITVECTOR(4);
SAT_2_22:BITVECTOR(8);
PB_2_22:BITVECTOR(8);
SIN_2_23:BITVECTOR(4);
SOUT_2_23:BITVECTOR(4);
SAT_2_23:BITVECTOR(8);
PB_2_23:BITVECTOR(8);
SIN_2_24:BITVECTOR(4);
SOUT_2_24:BITVECTOR(4);
SAT_2_24:BITVECTOR(8);
PB_2_24:BITVECTOR(8);
SIN_2_25:BITVECTOR(4);
SOUT_2_25:BITVECTOR(4);
SAT_2_25:BITVECTOR(8);
PB_2_25:BITVECTOR(8);
SIN_2_26:BITVECTOR(4);
SOUT_2_26:BITVECTOR(4);
SAT_2_26:BITVECTOR(8);
PB_2_26:BITVECTOR(8);
SIN_2_27:BITVECTOR(4);
SOUT_2_27:BITVECTOR(4);
SAT_2_27:BITVECTOR(8);
PB_2_27:BITVECTOR(8);
SIN_2_28:BITVECTOR(4);
SOUT_2_28:BITVECTOR(4);
SAT_2_28:BITVECTOR(8);
PB_2_28:BITVECTOR(8);
SIN_2_29:BITVECTOR(4);
SOUT_2_29:BITVECTOR(4);
SAT_2_29:BITVECTOR(8);
PB_2_29:BITVECTOR(8);
SIN_2_30:BITVECTOR(4);
SOUT_2_30:BITVECTOR(4);
SAT_2_30:BITVECTOR(8);
PB_2_30:BITVECTOR(8);
SIN_2_31:BITVECTOR(4);
SOUT_2_31:BITVECTOR(4);
SAT_2_31:BITVECTOR(8);
PB_2_31:BITVECTOR(8);
SIN_3_0:BITVECTOR(4);
SOUT_3_0:BITVECTOR(4);
SAT_3_0:BITVECTOR(8);
PB_3_0:BITVECTOR(8);
SIN_3_1:BITVECTOR(4);
SOUT_3_1:BITVECTOR(4);
SAT_3_1:BITVECTOR(8);
PB_3_1:BITVECTOR(8);
SIN_3_2:BITVECTOR(4);
SOUT_3_2:BITVECTOR(4);
SAT_3_2:BITVECTOR(8);
PB_3_2:BITVECTOR(8);
SIN_3_3:BITVECTOR(4);
SOUT_3_3:BITVECTOR(4);
SAT_3_3:BITVECTOR(8);
PB_3_3:BITVECTOR(8);
SIN_3_4:BITVECTOR(4);
SOUT_3_4:BITVECTOR(4);
SAT_3_4:BITVECTOR(8);
PB_3_4:BITVECTOR(8);
SIN_3_5:BITVECTOR(4);
SOUT_3_5:BITVECTOR(4);
SAT_3_5:BITVECTOR(8);
PB_3_5:BITVECTOR(8);
SIN_3_6:BITVECTOR(4);
SOUT_3_6:BITVECTOR(4);
SAT_3_6:BITVECTOR(8);
PB_3_6:BITVECTOR(8);
SIN_3_7:BITVECTOR(4);
SOUT_3_7:BITVECTOR(4);
SAT_3_7:BITVECTOR(8);
PB_3_7:BITVECTOR(8);
SIN_3_8:BITVECTOR(4);
SOUT_3_8:BITVECTOR(4);
SAT_3_8:BITVECTOR(8);
PB_3_8:BITVECTOR(8);
SIN_3_9:BITVECTOR(4);
SOUT_3_9:BITVECTOR(4);
SAT_3_9:BITVECTOR(8);
PB_3_9:BITVECTOR(8);
SIN_3_10:BITVECTOR(4);
SOUT_3_10:BITVECTOR(4);
SAT_3_10:BITVECTOR(8);
PB_3_10:BITVECTOR(8);
SIN_3_11:BITVECTOR(4);
SOUT_3_11:BITVECTOR(4);
SAT_3_11:BITVECTOR(8);
PB_3_11:BITVECTOR(8);
SIN_3_12:BITVECTOR(4);
SOUT_3_12:BITVECTOR(4);
SAT_3_12:BITVECTOR(8);
PB_3_12:BITVECTOR(8);
SIN_3_13:BITVECTOR(4);
SOUT_3_13:BITVECTOR(4);
SAT_3_13:BITVECTOR(8);
PB_3_13:BITVECTOR(8);
SIN_3_14:BITVECTOR(4);
SOUT_3_14:BITVECTOR(4);
SAT_3_14:BITVECTOR(8);
PB_3_14:BITVECTOR(8);
SIN_3_15:BITVECTOR(4);
SOUT_3_15:BITVECTOR(4);
SAT_3_15:BITVECTOR(8);
PB_3_15:BITVECTOR(8);
SIN_3_16:BITVECTOR(4);
SOUT_3_16:BITVECTOR(4);
SAT_3_16:BITVECTOR(8);
PB_3_16:BITVECTOR(8);
SIN_3_17:BITVECTOR(4);
SOUT_3_17:BITVECTOR(4);
SAT_3_17:BITVECTOR(8);
PB_3_17:BITVECTOR(8);
SIN_3_18:BITVECTOR(4);
SOUT_3_18:BITVECTOR(4);
SAT_3_18:BITVECTOR(8);
PB_3_18:BITVECTOR(8);
SIN_3_19:BITVECTOR(4);
SOUT_3_19:BITVECTOR(4);
SAT_3_19:BITVECTOR(8);
PB_3_19:BITVECTOR(8);
SIN_3_20:BITVECTOR(4);
SOUT_3_20:BITVECTOR(4);
SAT_3_20:BITVECTOR(8);
PB_3_20:BITVECTOR(8);
SIN_3_21:BITVECTOR(4);
SOUT_3_21:BITVECTOR(4);
SAT_3_21:BITVECTOR(8);
PB_3_21:BITVECTOR(8);
SIN_3_22:BITVECTOR(4);
SOUT_3_22:BITVECTOR(4);
SAT_3_22:BITVECTOR(8);
PB_3_22:BITVECTOR(8);
SIN_3_23:BITVECTOR(4);
SOUT_3_23:BITVECTOR(4);
SAT_3_23:BITVECTOR(8);
PB_3_23:BITVECTOR(8);
SIN_3_24:BITVECTOR(4);
SOUT_3_24:BITVECTOR(4);
SAT_3_24:BITVECTOR(8);
PB_3_24:BITVECTOR(8);
SIN_3_25:BITVECTOR(4);
SOUT_3_25:BITVECTOR(4);
SAT_3_25:BITVECTOR(8);
PB_3_25:BITVECTOR(8);
SIN_3_26:BITVECTOR(4);
SOUT_3_26:BITVECTOR(4);
SAT_3_26:BITVECTOR(8);
PB_3_26:BITVECTOR(8);
SIN_3_27:BITVECTOR(4);
SOUT_3_27:BITVECTOR(4);
SAT_3_27:BITVECTOR(8);
PB_3_27:BITVECTOR(8);
SIN_3_28:BITVECTOR(4);
SOUT_3_28:BITVECTOR(4);
SAT_3_28:BITVECTOR(8);
PB_3_28:BITVECTOR(8);
SIN_3_29:BITVECTOR(4);
SOUT_3_29:BITVECTOR(4);
SAT_3_29:BITVECTOR(8);
PB_3_29:BITVECTOR(8);
SIN_3_30:BITVECTOR(4);
SOUT_3_30:BITVECTOR(4);
SAT_3_30:BITVECTOR(8);
PB_3_30:BITVECTOR(8);
SIN_3_31:BITVECTOR(4);
SOUT_3_31:BITVECTOR(4);
SAT_3_31:BITVECTOR(8);
PB_3_31:BITVECTOR(8);
X0_0_0:BITVECTOR(64);
X1_0_0:BITVECTOR(64);
X0_0_1:BITVECTOR(64);
X1_0_1:BITVECTOR(64);
X0_0_2:BITVECTOR(64);
X1_0_2:BITVECTOR(64);
X0_0_3:BITVECTOR(64);
X1_0_3:BITVECTOR(64);
X0_0_4:BITVECTOR(64);
X1_0_4:BITVECTOR(64);
X0_1_0:BITVECTOR(64);
X1_1_0:BITVECTOR(64);
X0_1_1:BITVECTOR(64);
X1_1_1:BITVECTOR(64);
X0_1_2:BITVECTOR(64);
X1_1_2:BITVECTOR(64);
X0_1_3:BITVECTOR(64);
X1_1_3:BITVECTOR(64);
X0_1_4:BITVECTOR(64);
X1_1_4:BITVECTOR(64);
X0_2_0:BITVECTOR(64);
X1_2_0:BITVECTOR(64);
X0_2_1:BITVECTOR(64);
X1_2_1:BITVECTOR(64);
X0_2_2:BITVECTOR(64);
X1_2_2:BITVECTOR(64);
X0_2_3:BITVECTOR(64);
X1_2_3:BITVECTOR(64);
X0_2_4:BITVECTOR(64);
X1_2_4:BITVECTOR(64);
X0_3_0:BITVECTOR(64);
X1_3_0:BITVECTOR(64);
X0_3_1:BITVECTOR(64);
X1_3_1:BITVECTOR(64);
X0_3_2:BITVECTOR(64);
X1_3_2:BITVECTOR(64);
X0_3_3:BITVECTOR(64);
X1_3_3:BITVECTOR(64);
X0_3_4:BITVECTOR(64);
X1_3_4:BITVECTOR(64);
ASSERT(NOT(delta_in_0=0bin00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000));
ASSERT(delta_in_0=SIN_0_0@SIN_0_1@SIN_0_2@SIN_0_3@SIN_0_4@SIN_0_5@SIN_0_6@SIN_0_7@SIN_0_8@SIN_0_9@SIN_0_10@SIN_0_11@SIN_0_12@SIN_0_13@SIN_0_14@SIN_0_15@SIN_0_16@SIN_0_17@SIN_0_18@SIN_0_19@SIN_0_20@SIN_0_21@SIN_0_22@SIN_0_23@SIN_0_24@SIN_0_25@SIN_0_26@SIN_0_27@SIN_0_28@SIN_0_29@SIN_0_30@SIN_0_31);
ASSERT(NOT(DDT[SIN_0_0@SOUT_0_0]=0hex01));
ASSERT(NOT(DDT[SIN_0_1@SOUT_0_1]=0hex01));
ASSERT(NOT(DDT[SIN_0_2@SOUT_0_2]=0hex01));
ASSERT(NOT(DDT[SIN_0_3@SOUT_0_3]=0hex01));
ASSERT(NOT(DDT[SIN_0_4@SOUT_0_4]=0hex01));
ASSERT(NOT(DDT[SIN_0_5@SOUT_0_5]=0hex01));
ASSERT(NOT(DDT[SIN_0_6@SOUT_0_6]=0hex01));
ASSERT(NOT(DDT[SIN_0_7@SOUT_0_7]=0hex01));
ASSERT(NOT(DDT[SIN_0_8@SOUT_0_8]=0hex01));
ASSERT(NOT(DDT[SIN_0_9@SOUT_0_9]=0hex01));
ASSERT(NOT(DDT[SIN_0_10@SOUT_0_10]=0hex01));
ASSERT(NOT(DDT[SIN_0_11@SOUT_0_11]=0hex01));
ASSERT(NOT(DDT[SIN_0_12@SOUT_0_12]=0hex01));
ASSERT(NOT(DDT[SIN_0_13@SOUT_0_13]=0hex01));
ASSERT(NOT(DDT[SIN_0_14@SOUT_0_14]=0hex01));
ASSERT(NOT(DDT[SIN_0_15@SOUT_0_15]=0hex01));
ASSERT(NOT(DDT[SIN_0_16@SOUT_0_16]=0hex01));
ASSERT(NOT(DDT[SIN_0_17@SOUT_0_17]=0hex01));
ASSERT(NOT(DDT[SIN_0_18@SOUT_0_18]=0hex01));
ASSERT(NOT(DDT[SIN_0_19@SOUT_0_19]=0hex01));
ASSERT(NOT(DDT[SIN_0_20@SOUT_0_20]=0hex01));
ASSERT(NOT(DDT[SIN_0_21@SOUT_0_21]=0hex01));
ASSERT(NOT(DDT[SIN_0_22@SOUT_0_22]=0hex01));
ASSERT(NOT(DDT[SIN_0_23@SOUT_0_23]=0hex01));
ASSERT(NOT(DDT[SIN_0_24@SOUT_0_24]=0hex01));
ASSERT(NOT(DDT[SIN_0_25@SOUT_0_25]=0hex01));
ASSERT(NOT(DDT[SIN_0_26@SOUT_0_26]=0hex01));
ASSERT(NOT(DDT[SIN_0_27@SOUT_0_27]=0hex01));
ASSERT(NOT(DDT[SIN_0_28@SOUT_0_28]=0hex01));
ASSERT(NOT(DDT[SIN_0_29@SOUT_0_29]=0hex01));
ASSERT(NOT(DDT[SIN_0_30@SOUT_0_30]=0hex01));
ASSERT(NOT(DDT[SIN_0_31@SOUT_0_31]=0hex01));
%将S盒输出划分为左右两部分
ASSERT(X0_0_0=SOUT_0_0@SOUT_0_1@SOUT_0_2@SOUT_0_3@SOUT_0_4@SOUT_0_5@SOUT_0_6@SOUT_0_7@SOUT_0_8@SOUT_0_9@SOUT_0_10@SOUT_0_11@SOUT_0_12@SOUT_0_13@SOUT_0_14@SOUT_0_15);
ASSERT(X1_0_0=SOUT_0_16@SOUT_0_17@SOUT_0_18@SOUT_0_19@SOUT_0_20@SOUT_0_21@SOUT_0_22@SOUT_0_23@SOUT_0_24@SOUT_0_25@SOUT_0_26@SOUT_0_27@SOUT_0_28@SOUT_0_29@SOUT_0_30@SOUT_0_31);
ASSERT(X1_0_1=BVXOR(X0_0_0,X1_0_0));
ASSERT(X1_0_ls4=X1_0_1[59:32]@X1_0_1[63:60]@X1_0_1[27:0]@X1_0_1[31:28]);
ASSERT(X0_0_1=BVXOR(X0_0_0,X1_0_ls4));
ASSERT(X0_0_ls8=X0_0_1[55:32]@X0_0_1[63:56]@X0_0_1[23:0]@X0_0_1[31:24]);
ASSERT(X1_0_2=BVXOR(X1_0_1,X0_0_ls8));
ASSERT(X1_0_ls8=X1_0_2[55:32]@X1_0_2[63:56]@X1_0_2[23:0]@X1_0_2[31:24]);
ASSERT(X0_0_2=BVXOR(X0_0_1,X1_0_ls8));
ASSERT(X0_0_ls20=X0_0_2[43:32]@X0_0_2[63:44]@X0_0_2[11:0]@X0_0_2[31:12]);
ASSERT(X1_0_3=BVXOR(X1_0_2,X0_0_ls20));
ASSERT(X0_0_3=BVXOR(X0_0_2,X1_0_3));
ASSERT(X0_0_4=X0_0_3[55:48]@X0_0_3[39:32]@X0_0_3[31:24]@X0_0_3[15:8]@X0_0_3[63:56]@X0_0_3[47:40]@X0_0_3[7:0]@X0_0_3[23:16]);
ASSERT(X1_0_4=X1_0_3[47:40]@X1_0_3[7:0]@X1_0_3[23:16]@X1_0_3[63:56]@X1_0_3[55:48]@X1_0_3[15:8]@X1_0_3[31:24]@X1_0_3[39:32]);
ASSERT(delta_out_0=X0_0_4@X1_0_4);
ASSERT(delta_in_1=delta_out_0);
ASSERT(delta_in_1=SIN_1_0@SIN_1_1@SIN_1_2@SIN_1_3@SIN_1_4@SIN_1_5@SIN_1_6@SIN_1_7@SIN_1_8@SIN_1_9@SIN_1_10@SIN_1_11@SIN_1_12@SIN_1_13@SIN_1_14@SIN_1_15@SIN_1_16@SIN_1_17@SIN_1_18@SIN_1_19@SIN_1_20@SIN_1_21@SIN_1_22@SIN_1_23@SIN_1_24@SIN_1_25@SIN_1_26@SIN_1_27@SIN_1_28@SIN_1_29@SIN_1_30@SIN_1_31);
ASSERT(NOT(DDT[SIN_1_0@SOUT_1_0]=0hex01));
ASSERT(NOT(DDT[SIN_1_1@SOUT_1_1]=0hex01));
ASSERT(NOT(DDT[SIN_1_2@SOUT_1_2]=0hex01));
ASSERT(NOT(DDT[SIN_1_3@SOUT_1_3]=0hex01));
ASSERT(NOT(DDT[SIN_1_4@SOUT_1_4]=0hex01));
ASSERT(NOT(DDT[SIN_1_5@SOUT_1_5]=0hex01));
ASSERT(NOT(DDT[SIN_1_6@SOUT_1_6]=0hex01));
ASSERT(NOT(DDT[SIN_1_7@SOUT_1_7]=0hex01));
ASSERT(NOT(DDT[SIN_1_8@SOUT_1_8]=0hex01));
ASSERT(NOT(DDT[SIN_1_9@SOUT_1_9]=0hex01));
ASSERT(NOT(DDT[SIN_1_10@SOUT_1_10]=0hex01));
ASSERT(NOT(DDT[SIN_1_11@SOUT_1_11]=0hex01));
ASSERT(NOT(DDT[SIN_1_12@SOUT_1_12]=0hex01));
ASSERT(NOT(DDT[SIN_1_13@SOUT_1_13]=0hex01));
ASSERT(NOT(DDT[SIN_1_14@SOUT_1_14]=0hex01));
ASSERT(NOT(DDT[SIN_1_15@SOUT_1_15]=0hex01));
ASSERT(NOT(DDT[SIN_1_16@SOUT_1_16]=0hex01));
ASSERT(NOT(DDT[SIN_1_17@SOUT_1_17]=0hex01));
ASSERT(NOT(DDT[SIN_1_18@SOUT_1_18]=0hex01));
ASSERT(NOT(DDT[SIN_1_19@SOUT_1_19]=0hex01));
ASSERT(NOT(DDT[SIN_1_20@SOUT_1_20]=0hex01));
ASSERT(NOT(DDT[SIN_1_21@SOUT_1_21]=0hex01));
ASSERT(NOT(DDT[SIN_1_22@SOUT_1_22]=0hex01));
ASSERT(NOT(DDT[SIN_1_23@SOUT_1_23]=0hex01));
ASSERT(NOT(DDT[SIN_1_24@SOUT_1_24]=0hex01));
ASSERT(NOT(DDT[SIN_1_25@SOUT_1_25]=0hex01));
ASSERT(NOT(DDT[SIN_1_26@SOUT_1_26]=0hex01));
ASSERT(NOT(DDT[SIN_1_27@SOUT_1_27]=0hex01));
ASSERT(NOT(DDT[SIN_1_28@SOUT_1_28]=0hex01));
ASSERT(NOT(DDT[SIN_1_29@SOUT_1_29]=0hex01));
ASSERT(NOT(DDT[SIN_1_30@SOUT_1_30]=0hex01));
ASSERT(NOT(DDT[SIN_1_31@SOUT_1_31]=0hex01));
%将S盒输出划分为左右两部分
ASSERT(X0_1_0=SOUT_1_0@SOUT_1_1@SOUT_1_2@SOUT_1_3@SOUT_1_4@SOUT_1_5@SOUT_1_6@SOUT_1_7@SOUT_1_8@SOUT_1_9@SOUT_1_10@SOUT_1_11@SOUT_1_12@SOUT_1_13@SOUT_1_14@SOUT_1_15);
ASSERT(X1_1_0=SOUT_1_16@SOUT_1_17@SOUT_1_18@SOUT_1_19@SOUT_1_20@SOUT_1_21@SOUT_1_22@SOUT_1_23@SOUT_1_24@SOUT_1_25@SOUT_1_26@SOUT_1_27@SOUT_1_28@SOUT_1_29@SOUT_1_30@SOUT_1_31);
ASSERT(X1_1_1=BVXOR(X0_1_0,X1_1_0));
ASSERT(X1_1_ls4=X1_1_1[59:32]@X1_1_1[63:60]@X1_1_1[27:0]@X1_1_1[31:28]);
ASSERT(X0_1_1=BVXOR(X0_1_0,X1_1_ls4));
ASSERT(X0_1_ls8=X0_1_1[55:32]@X0_1_1[63:56]@X0_1_1[23:0]@X0_1_1[31:24]);
ASSERT(X1_1_2=BVXOR(X1_1_1,X0_1_ls8));
ASSERT(X1_1_ls8=X1_1_2[55:32]@X1_1_2[63:56]@X1_1_2[23:0]@X1_1_2[31:24]);
ASSERT(X0_1_2=BVXOR(X0_1_1,X1_1_ls8));
ASSERT(X0_1_ls20=X0_1_2[43:32]@X0_1_2[63:44]@X0_1_2[11:0]@X0_1_2[31:12]);
ASSERT(X1_1_3=BVXOR(X1_1_2,X0_1_ls20));
ASSERT(X0_1_3=BVXOR(X0_1_2,X1_1_3));
ASSERT(X0_1_4=X0_1_3[55:48]@X0_1_3[39:32]@X0_1_3[31:24]@X0_1_3[15:8]@X0_1_3[63:56]@X0_1_3[47:40]@X0_1_3[7:0]@X0_1_3[23:16]);
ASSERT(X1_1_4=X1_1_3[47:40]@X1_1_3[7:0]@X1_1_3[23:16]@X1_1_3[63:56]@X1_1_3[55:48]@X1_1_3[15:8]@X1_1_3[31:24]@X1_1_3[39:32]);
ASSERT(delta_out_1=X0_1_4@X1_1_4);
ASSERT(delta_in_2=delta_out_1);
ASSERT(delta_in_2=SIN_2_0@SIN_2_1@SIN_2_2@SIN_2_3@SIN_2_4@SIN_2_5@SIN_2_6@SIN_2_7@SIN_2_8@SIN_2_9@SIN_2_10@SIN_2_11@SIN_2_12@SIN_2_13@SIN_2_14@SIN_2_15@SIN_2_16@SIN_2_17@SIN_2_18@SIN_2_19@SIN_2_20@SIN_2_21@SIN_2_22@SIN_2_23@SIN_2_24@SIN_2_25@SIN_2_26@SIN_2_27@SIN_2_28@SIN_2_29@SIN_2_30@SIN_2_31);
ASSERT(NOT(DDT[SIN_2_0@SOUT_2_0]=0hex01));
ASSERT(NOT(DDT[SIN_2_1@SOUT_2_1]=0hex01));
ASSERT(NOT(DDT[SIN_2_2@SOUT_2_2]=0hex01));
ASSERT(NOT(DDT[SIN_2_3@SOUT_2_3]=0hex01));
ASSERT(NOT(DDT[SIN_2_4@SOUT_2_4]=0hex01));
ASSERT(NOT(DDT[SIN_2_5@SOUT_2_5]=0hex01));
ASSERT(NOT(DDT[SIN_2_6@SOUT_2_6]=0hex01));
ASSERT(NOT(DDT[SIN_2_7@SOUT_2_7]=0hex01));
ASSERT(NOT(DDT[SIN_2_8@SOUT_2_8]=0hex01));
ASSERT(NOT(DDT[SIN_2_9@SOUT_2_9]=0hex01));
ASSERT(NOT(DDT[SIN_2_10@SOUT_2_10]=0hex01));
ASSERT(NOT(DDT[SIN_2_11@SOUT_2_11]=0hex01));
ASSERT(NOT(DDT[SIN_2_12@SOUT_2_12]=0hex01));
ASSERT(NOT(DDT[SIN_2_13@SOUT_2_13]=0hex01));
ASSERT(NOT(DDT[SIN_2_14@SOUT_2_14]=0hex01));
ASSERT(NOT(DDT[SIN_2_15@SOUT_2_15]=0hex01));
ASSERT(NOT(DDT[SIN_2_16@SOUT_2_16]=0hex01));
ASSERT(NOT(DDT[SIN_2_17@SOUT_2_17]=0hex01));
ASSERT(NOT(DDT[SIN_2_18@SOUT_2_18]=0hex01));
ASSERT(NOT(DDT[SIN_2_19@SOUT_2_19]=0hex01));
ASSERT(NOT(DDT[SIN_2_20@SOUT_2_20]=0hex01));
ASSERT(NOT(DDT[SIN_2_21@SOUT_2_21]=0hex01));
ASSERT(NOT(DDT[SIN_2_22@SOUT_2_22]=0hex01));
ASSERT(NOT(DDT[SIN_2_23@SOUT_2_23]=0hex01));
ASSERT(NOT(DDT[SIN_2_24@SOUT_2_24]=0hex01));
ASSERT(NOT(DDT[SIN_2_25@SOUT_2_25]=0hex01));
ASSERT(NOT(DDT[SIN_2_26@SOUT_2_26]=0hex01));
ASSERT(NOT(DDT[SIN_2_27@SOUT_2_27]=0hex01));
ASSERT(NOT(DDT[SIN_2_28@SOUT_2_28]=0hex01));
ASSERT(NOT(DDT[SIN_2_29@SOUT_2_29]=0hex01));
ASSERT(NOT(DDT[SIN_2_30@SOUT_2_30]=0hex01));
ASSERT(NOT(DDT[SIN_2_31@SOUT_2_31]=0hex01));
%将S盒输出划分为左右两部分
ASSERT(X0_2_0=SOUT_2_0@SOUT_2_1@SOUT_2_2@SOUT_2_3@SOUT_2_4@SOUT_2_5@SOUT_2_6@SOUT_2_7@SOUT_2_8@SOUT_2_9@SOUT_2_10@SOUT_2_11@SOUT_2_12@SOUT_2_13@SOUT_2_14@SOUT_2_15);
ASSERT(X1_2_0=SOUT_2_16@SOUT_2_17@SOUT_2_18@SOUT_2_19@SOUT_2_20@SOUT_2_21@SOUT_2_22@SOUT_2_23@SOUT_2_24@SOUT_2_25@SOUT_2_26@SOUT_2_27@SOUT_2_28@SOUT_2_29@SOUT_2_30@SOUT_2_31);
ASSERT(X1_2_1=BVXOR(X0_2_0,X1_2_0));
ASSERT(X1_2_ls4=X1_2_1[59:32]@X1_2_1[63:60]@X1_2_1[27:0]@X1_2_1[31:28]);
ASSERT(X0_2_1=BVXOR(X0_2_0,X1_2_ls4));
ASSERT(X0_2_ls8=X0_2_1[55:32]@X0_2_1[63:56]@X0_2_1[23:0]@X0_2_1[31:24]);
ASSERT(X1_2_2=BVXOR(X1_2_1,X0_2_ls8));
ASSERT(X1_2_ls8=X1_2_2[55:32]@X1_2_2[63:56]@X1_2_2[23:0]@X1_2_2[31:24]);
ASSERT(X0_2_2=BVXOR(X0_2_1,X1_2_ls8));
ASSERT(X0_2_ls20=X0_2_2[43:32]@X0_2_2[63:44]@X0_2_2[11:0]@X0_2_2[31:12]);
ASSERT(X1_2_3=BVXOR(X1_2_2,X0_2_ls20));
ASSERT(X0_2_3=BVXOR(X0_2_2,X1_2_3));
ASSERT(X0_2_4=X0_2_3[55:48]@X0_2_3[39:32]@X0_2_3[31:24]@X0_2_3[15:8]@X0_2_3[63:56]@X0_2_3[47:40]@X0_2_3[7:0]@X0_2_3[23:16]);
ASSERT(X1_2_4=X1_2_3[47:40]@X1_2_3[7:0]@X1_2_3[23:16]@X1_2_3[63:56]@X1_2_3[55:48]@X1_2_3[15:8]@X1_2_3[31:24]@X1_2_3[39:32]);
ASSERT(delta_out_2=X0_2_4@X1_2_4);
ASSERT(delta_in_3=delta_out_2);
ASSERT(delta_in_3=SIN_3_0@SIN_3_1@SIN_3_2@SIN_3_3@SIN_3_4@SIN_3_5@SIN_3_6@SIN_3_7@SIN_3_8@SIN_3_9@SIN_3_10@SIN_3_11@SIN_3_12@SIN_3_13@SIN_3_14@SIN_3_15@SIN_3_16@SIN_3_17@SIN_3_18@SIN_3_19@SIN_3_20@SIN_3_21@SIN_3_22@SIN_3_23@SIN_3_24@SIN_3_25@SIN_3_26@SIN_3_27@SIN_3_28@SIN_3_29@SIN_3_30@SIN_3_31);
ASSERT(NOT(DDT[SIN_3_0@SOUT_3_0]=0hex01));
ASSERT(NOT(DDT[SIN_3_1@SOUT_3_1]=0hex01));
ASSERT(NOT(DDT[SIN_3_2@SOUT_3_2]=0hex01));
ASSERT(NOT(DDT[SIN_3_3@SOUT_3_3]=0hex01));
ASSERT(NOT(DDT[SIN_3_4@SOUT_3_4]=0hex01));
ASSERT(NOT(DDT[SIN_3_5@SOUT_3_5]=0hex01));
ASSERT(NOT(DDT[SIN_3_6@SOUT_3_6]=0hex01));
ASSERT(NOT(DDT[SIN_3_7@SOUT_3_7]=0hex01));
ASSERT(NOT(DDT[SIN_3_8@SOUT_3_8]=0hex01));
ASSERT(NOT(DDT[SIN_3_9@SOUT_3_9]=0hex01));
ASSERT(NOT(DDT[SIN_3_10@SOUT_3_10]=0hex01));
ASSERT(NOT(DDT[SIN_3_11@SOUT_3_11]=0hex01));
ASSERT(NOT(DDT[SIN_3_12@SOUT_3_12]=0hex01));
ASSERT(NOT(DDT[SIN_3_13@SOUT_3_13]=0hex01));
ASSERT(NOT(DDT[SIN_3_14@SOUT_3_14]=0hex01));
ASSERT(NOT(DDT[SIN_3_15@SOUT_3_15]=0hex01));
ASSERT(NOT(DDT[SIN_3_16@SOUT_3_16]=0hex01));
ASSERT(NOT(DDT[SIN_3_17@SOUT_3_17]=0hex01));
ASSERT(NOT(DDT[SIN_3_18@SOUT_3_18]=0hex01));
ASSERT(NOT(DDT[SIN_3_19@SOUT_3_19]=0hex01));
ASSERT(NOT(DDT[SIN_3_20@SOUT_3_20]=0hex01));
ASSERT(NOT(DDT[SIN_3_21@SOUT_3_21]=0hex01));
ASSERT(NOT(DDT[SIN_3_22@SOUT_3_22]=0hex01));
ASSERT(NOT(DDT[SIN_3_23@SOUT_3_23]=0hex01));
ASSERT(NOT(DDT[SIN_3_24@SOUT_3_24]=0hex01));
ASSERT(NOT(DDT[SIN_3_25@SOUT_3_25]=0hex01));
ASSERT(NOT(DDT[SIN_3_26@SOUT_3_26]=0hex01));
ASSERT(NOT(DDT[SIN_3_27@SOUT_3_27]=0hex01));
ASSERT(NOT(DDT[SIN_3_28@SOUT_3_28]=0hex01));
ASSERT(NOT(DDT[SIN_3_29@SOUT_3_29]=0hex01));
ASSERT(NOT(DDT[SIN_3_30@SOUT_3_30]=0hex01));
ASSERT(NOT(DDT[SIN_3_31@SOUT_3_31]=0hex01));
%将S盒输出划分为左右两部分
ASSERT(X0_3_0=SOUT_3_0@SOUT_3_1@SOUT_3_2@SOUT_3_3@SOUT_3_4@SOUT_3_5@SOUT_3_6@SOUT_3_7@SOUT_3_8@SOUT_3_9@SOUT_3_10@SOUT_3_11@SOUT_3_12@SOUT_3_13@SOUT_3_14@SOUT_3_15);
ASSERT(X1_3_0=SOUT_3_16@SOUT_3_17@SOUT_3_18@SOUT_3_19@SOUT_3_20@SOUT_3_21@SOUT_3_22@SOUT_3_23@SOUT_3_24@SOUT_3_25@SOUT_3_26@SOUT_3_27@SOUT_3_28@SOUT_3_29@SOUT_3_30@SOUT_3_31);
ASSERT(X1_3_1=BVXOR(X0_3_0,X1_3_0));
ASSERT(X1_3_ls4=X1_3_1[59:32]@X1_3_1[63:60]@X1_3_1[27:0]@X1_3_1[31:28]);
ASSERT(X0_3_1=BVXOR(X0_3_0,X1_3_ls4));
ASSERT(X0_3_ls8=X0_3_1[55:32]@X0_3_1[63:56]@X0_3_1[23:0]@X0_3_1[31:24]);
ASSERT(X1_3_2=BVXOR(X1_3_1,X0_3_ls8));
ASSERT(X1_3_ls8=X1_3_2[55:32]@X1_3_2[63:56]@X1_3_2[23:0]@X1_3_2[31:24]);
ASSERT(X0_3_2=BVXOR(X0_3_1,X1_3_ls8));
ASSERT(X0_3_ls20=X0_3_2[43:32]@X0_3_2[63:44]@X0_3_2[11:0]@X0_3_2[31:12]);
ASSERT(X1_3_3=BVXOR(X1_3_2,X0_3_ls20));
ASSERT(X0_3_3=BVXOR(X0_3_2,X1_3_3));
ASSERT(X0_3_4=X0_3_3[55:48]@X0_3_3[39:32]@X0_3_3[31:24]@X0_3_3[15:8]@X0_3_3[63:56]@X0_3_3[47:40]@X0_3_3[7:0]@X0_3_3[23:16]);
ASSERT(X1_3_4=X1_3_3[47:40]@X1_3_3[7:0]@X1_3_3[23:16]@X1_3_3[63:56]@X1_3_3[55:48]@X1_3_3[15:8]@X1_3_3[31:24]@X1_3_3[39:32]);
ASSERT(delta_out_3=X0_3_4@X1_3_4);
ASSERT(IF SIN_0_0= 0hex0 THEN SAT_0_0= 0hex00 AND PB_0_0=0bin00000000 ELSE SAT_0_0= 0hex01 AND PB_0_0=DDT[SIN_0_0@SOUT_0_0] ENDIF);
ASSERT(IF SIN_0_1= 0hex0 THEN SAT_0_1= 0hex00 AND PB_0_1=0bin00000000 ELSE SAT_0_1= 0hex01 AND PB_0_1=DDT[SIN_0_1@SOUT_0_1] ENDIF);
ASSERT(IF SIN_0_2= 0hex0 THEN SAT_0_2= 0hex00 AND PB_0_2=0bin00000000 ELSE SAT_0_2= 0hex01 AND PB_0_2=DDT[SIN_0_2@SOUT_0_2] ENDIF);
ASSERT(IF SIN_0_3= 0hex0 THEN SAT_0_3= 0hex00 AND PB_0_3=0bin00000000 ELSE SAT_0_3= 0hex01 AND PB_0_3=DDT[SIN_0_3@SOUT_0_3] ENDIF);
ASSERT(IF SIN_0_4= 0hex0 THEN SAT_0_4= 0hex00 AND PB_0_4=0bin00000000 ELSE SAT_0_4= 0hex01 AND PB_0_4=DDT[SIN_0_4@SOUT_0_4] ENDIF);
ASSERT(IF SIN_0_5= 0hex0 THEN SAT_0_5= 0hex00 AND PB_0_5=0bin00000000 ELSE SAT_0_5= 0hex01 AND PB_0_5=DDT[SIN_0_5@SOUT_0_5] ENDIF);
ASSERT(IF SIN_0_6= 0hex0 THEN SAT_0_6= 0hex00 AND PB_0_6=0bin00000000 ELSE SAT_0_6= 0hex01 AND PB_0_6=DDT[SIN_0_6@SOUT_0_6] ENDIF);
ASSERT(IF SIN_0_7= 0hex0 THEN SAT_0_7= 0hex00 AND PB_0_7=0bin00000000 ELSE SAT_0_7= 0hex01 AND PB_0_7=DDT[SIN_0_7@SOUT_0_7] ENDIF);
ASSERT(IF SIN_0_8= 0hex0 THEN SAT_0_8= 0hex00 AND PB_0_8=0bin00000000 ELSE SAT_0_8= 0hex01 AND PB_0_8=DDT[SIN_0_8@SOUT_0_8] ENDIF);
ASSERT(IF SIN_0_9= 0hex0 THEN SAT_0_9= 0hex00 AND PB_0_9=0bin00000000 ELSE SAT_0_9= 0hex01 AND PB_0_9=DDT[SIN_0_9@SOUT_0_9] ENDIF);
ASSERT(IF SIN_0_10= 0hex0 THEN SAT_0_10= 0hex00 AND PB_0_10=0bin00000000 ELSE SAT_0_10= 0hex01 AND PB_0_10=DDT[SIN_0_10@SOUT_0_10] ENDIF);
ASSERT(IF SIN_0_11= 0hex0 THEN SAT_0_11= 0hex00 AND PB_0_11=0bin00000000 ELSE SAT_0_11= 0hex01 AND PB_0_11=DDT[SIN_0_11@SOUT_0_11] ENDIF);
ASSERT(IF SIN_0_12= 0hex0 THEN SAT_0_12= 0hex00 AND PB_0_12=0bin00000000 ELSE SAT_0_12= 0hex01 AND PB_0_12=DDT[SIN_0_12@SOUT_0_12] ENDIF);
ASSERT(IF SIN_0_13= 0hex0 THEN SAT_0_13= 0hex00 AND PB_0_13=0bin00000000 ELSE SAT_0_13= 0hex01 AND PB_0_13=DDT[SIN_0_13@SOUT_0_13] ENDIF);
ASSERT(IF SIN_0_14= 0hex0 THEN SAT_0_14= 0hex00 AND PB_0_14=0bin00000000 ELSE SAT_0_14= 0hex01 AND PB_0_14=DDT[SIN_0_14@SOUT_0_14] ENDIF);
ASSERT(IF SIN_0_15= 0hex0 THEN SAT_0_15= 0hex00 AND PB_0_15=0bin00000000 ELSE SAT_0_15= 0hex01 AND PB_0_15=DDT[SIN_0_15@SOUT_0_15] ENDIF);
ASSERT(IF SIN_0_16= 0hex0 THEN SAT_0_16= 0hex00 AND PB_0_16=0bin00000000 ELSE SAT_0_16= 0hex01 AND PB_0_16=DDT[SIN_0_16@SOUT_0_16] ENDIF);
ASSERT(IF SIN_0_17= 0hex0 THEN SAT_0_17= 0hex00 AND PB_0_17=0bin00000000 ELSE SAT_0_17= 0hex01 AND PB_0_17=DDT[SIN_0_17@SOUT_0_17] ENDIF);
ASSERT(IF SIN_0_18= 0hex0 THEN SAT_0_18= 0hex00 AND PB_0_18=0bin00000000 ELSE SAT_0_18= 0hex01 AND PB_0_18=DDT[SIN_0_18@SOUT_0_18] ENDIF);
ASSERT(IF SIN_0_19= 0hex0 THEN SAT_0_19= 0hex00 AND PB_0_19=0bin00000000 ELSE SAT_0_19= 0hex01 AND PB_0_19=DDT[SIN_0_19@SOUT_0_19] ENDIF);
ASSERT(IF SIN_0_20= 0hex0 THEN SAT_0_20= 0hex00 AND PB_0_20=0bin00000000 ELSE SAT_0_20= 0hex01 AND PB_0_20=DDT[SIN_0_20@SOUT_0_20] ENDIF);
ASSERT(IF SIN_0_21= 0hex0 THEN SAT_0_21= 0hex00 AND PB_0_21=0bin00000000 ELSE SAT_0_21= 0hex01 AND PB_0_21=DDT[SIN_0_21@SOUT_0_21] ENDIF);
ASSERT(IF SIN_0_22= 0hex0 THEN SAT_0_22= 0hex00 AND PB_0_22=0bin00000000 ELSE SAT_0_22= 0hex01 AND PB_0_22=DDT[SIN_0_22@SOUT_0_22] ENDIF);
ASSERT(IF SIN_0_23= 0hex0 THEN SAT_0_23= 0hex00 AND PB_0_23=0bin00000000 ELSE SAT_0_23= 0hex01 AND PB_0_23=DDT[SIN_0_23@SOUT_0_23] ENDIF);
ASSERT(IF SIN_0_24= 0hex0 THEN SAT_0_24= 0hex00 AND PB_0_24=0bin00000000 ELSE SAT_0_24= 0hex01 AND PB_0_24=DDT[SIN_0_24@SOUT_0_24] ENDIF);
ASSERT(IF SIN_0_25= 0hex0 THEN SAT_0_25= 0hex00 AND PB_0_25=0bin00000000 ELSE SAT_0_25= 0hex01 AND PB_0_25=DDT[SIN_0_25@SOUT_0_25] ENDIF);
ASSERT(IF SIN_0_26= 0hex0 THEN SAT_0_26= 0hex00 AND PB_0_26=0bin00000000 ELSE SAT_0_26= 0hex01 AND PB_0_26=DDT[SIN_0_26@SOUT_0_26] ENDIF);
ASSERT(IF SIN_0_27= 0hex0 THEN SAT_0_27= 0hex00 AND PB_0_27=0bin00000000 ELSE SAT_0_27= 0hex01 AND PB_0_27=DDT[SIN_0_27@SOUT_0_27] ENDIF);
ASSERT(IF SIN_0_28= 0hex0 THEN SAT_0_28= 0hex00 AND PB_0_28=0bin00000000 ELSE SAT_0_28= 0hex01 AND PB_0_28=DDT[SIN_0_28@SOUT_0_28] ENDIF);
ASSERT(IF SIN_0_29= 0hex0 THEN SAT_0_29= 0hex00 AND PB_0_29=0bin00000000 ELSE SAT_0_29= 0hex01 AND PB_0_29=DDT[SIN_0_29@SOUT_0_29] ENDIF);
ASSERT(IF SIN_0_30= 0hex0 THEN SAT_0_30= 0hex00 AND PB_0_30=0bin00000000 ELSE SAT_0_30= 0hex01 AND PB_0_30=DDT[SIN_0_30@SOUT_0_30] ENDIF);
ASSERT(IF SIN_0_31= 0hex0 THEN SAT_0_31= 0hex00 AND PB_0_31=0bin00000000 ELSE SAT_0_31= 0hex01 AND PB_0_31=DDT[SIN_0_31@SOUT_0_31] ENDIF);
ASSERT(count_0=BVPLUS(8,SAT_0_0,SAT_0_1,SAT_0_2,SAT_0_3,SAT_0_4,SAT_0_5,SAT_0_6,SAT_0_7,SAT_0_8,SAT_0_9,SAT_0_10,SAT_0_11,SAT_0_12,SAT_0_13,SAT_0_14,SAT_0_15,SAT_0_16,SAT_0_17,SAT_0_18,SAT_0_19,SAT_0_20,SAT_0_21,SAT_0_22,SAT_0_23,SAT_0_24,SAT_0_25,SAT_0_26,SAT_0_27,SAT_0_28,SAT_0_29,SAT_0_30,SAT_0_31));
ASSERT(P_0=BVPLUS(8,PB_0_0,PB_0_1,PB_0_2,PB_0_3,PB_0_4,PB_0_5,PB_0_6,PB_0_7,PB_0_8,PB_0_9,PB_0_10,PB_0_11,PB_0_12,PB_0_13,PB_0_14,PB_0_15,PB_0_16,PB_0_17,PB_0_18,PB_0_19,PB_0_20,PB_0_21,PB_0_22,PB_0_23,PB_0_24,PB_0_25,PB_0_26,PB_0_27,PB_0_28,PB_0_29,PB_0_30,PB_0_31));
ASSERT(IF SIN_1_0= 0hex0 THEN SAT_1_0= 0hex00 AND PB_1_0=0bin00000000 ELSE SAT_1_0= 0hex01 AND PB_1_0=DDT[SIN_1_0@SOUT_1_0] ENDIF);
ASSERT(IF SIN_1_1= 0hex0 THEN SAT_1_1= 0hex00 AND PB_1_1=0bin00000000 ELSE SAT_1_1= 0hex01 AND PB_1_1=DDT[SIN_1_1@SOUT_1_1] ENDIF);
ASSERT(IF SIN_1_2= 0hex0 THEN SAT_1_2= 0hex00 AND PB_1_2=0bin00000000 ELSE SAT_1_2= 0hex01 AND PB_1_2=DDT[SIN_1_2@SOUT_1_2] ENDIF);
ASSERT(IF SIN_1_3= 0hex0 THEN SAT_1_3= 0hex00 AND PB_1_3=0bin00000000 ELSE SAT_1_3= 0hex01 AND PB_1_3=DDT[SIN_1_3@SOUT_1_3] ENDIF);
ASSERT(IF SIN_1_4= 0hex0 THEN SAT_1_4= 0hex00 AND PB_1_4=0bin00000000 ELSE SAT_1_4= 0hex01 AND PB_1_4=DDT[SIN_1_4@SOUT_1_4] ENDIF);
ASSERT(IF SIN_1_5= 0hex0 THEN SAT_1_5= 0hex00 AND PB_1_5=0bin00000000 ELSE SAT_1_5= 0hex01 AND PB_1_5=DDT[SIN_1_5@SOUT_1_5] ENDIF);
ASSERT(IF SIN_1_6= 0hex0 THEN SAT_1_6= 0hex00 AND PB_1_6=0bin00000000 ELSE SAT_1_6= 0hex01 AND PB_1_6=DDT[SIN_1_6@SOUT_1_6] ENDIF);
ASSERT(IF SIN_1_7= 0hex0 THEN SAT_1_7= 0hex00 AND PB_1_7=0bin00000000 ELSE SAT_1_7= 0hex01 AND PB_1_7=DDT[SIN_1_7@SOUT_1_7] ENDIF);
ASSERT(IF SIN_1_8= 0hex0 THEN SAT_1_8= 0hex00 AND PB_1_8=0bin00000000 ELSE SAT_1_8= 0hex01 AND PB_1_8=DDT[SIN_1_8@SOUT_1_8] ENDIF);
ASSERT(IF SIN_1_9= 0hex0 THEN SAT_1_9= 0hex00 AND PB_1_9=0bin00000000 ELSE SAT_1_9= 0hex01 AND PB_1_9=DDT[SIN_1_9@SOUT_1_9] ENDIF);
ASSERT(IF SIN_1_10= 0hex0 THEN SAT_1_10= 0hex00 AND PB_1_10=0bin00000000 ELSE SAT_1_10= 0hex01 AND PB_1_10=DDT[SIN_1_10@SOUT_1_10] ENDIF);
ASSERT(IF SIN_1_11= 0hex0 THEN SAT_1_11= 0hex00 AND PB_1_11=0bin00000000 ELSE SAT_1_11= 0hex01 AND PB_1_11=DDT[SIN_1_11@SOUT_1_11] ENDIF);
ASSERT(IF SIN_1_12= 0hex0 THEN SAT_1_12= 0hex00 AND PB_1_12=0bin00000000 ELSE SAT_1_12= 0hex01 AND PB_1_12=DDT[SIN_1_12@SOUT_1_12] ENDIF);
ASSERT(IF SIN_1_13= 0hex0 THEN SAT_1_13= 0hex00 AND PB_1_13=0bin00000000 ELSE SAT_1_13= 0hex01 AND PB_1_13=DDT[SIN_1_13@SOUT_1_13] ENDIF);
ASSERT(IF SIN_1_14= 0hex0 THEN SAT_1_14= 0hex00 AND PB_1_14=0bin00000000 ELSE SAT_1_14= 0hex01 AND PB_1_14=DDT[SIN_1_14@SOUT_1_14] ENDIF);
ASSERT(IF SIN_1_15= 0hex0 THEN SAT_1_15= 0hex00 AND PB_1_15=0bin00000000 ELSE SAT_1_15= 0hex01 AND PB_1_15=DDT[SIN_1_15@SOUT_1_15] ENDIF);
ASSERT(IF SIN_1_16= 0hex0 THEN SAT_1_16= 0hex00 AND PB_1_16=0bin00000000 ELSE SAT_1_16= 0hex01 AND PB_1_16=DDT[SIN_1_16@SOUT_1_16] ENDIF);
ASSERT(IF SIN_1_17= 0hex0 THEN SAT_1_17= 0hex00 AND PB_1_17=0bin00000000 ELSE SAT_1_17= 0hex01 AND PB_1_17=DDT[SIN_1_17@SOUT_1_17] ENDIF);
ASSERT(IF SIN_1_18= 0hex0 THEN SAT_1_18= 0hex00 AND PB_1_18=0bin00000000 ELSE SAT_1_18= 0hex01 AND PB_1_18=DDT[SIN_1_18@SOUT_1_18] ENDIF);
ASSERT(IF SIN_1_19= 0hex0 THEN SAT_1_19= 0hex00 AND PB_1_19=0bin00000000 ELSE SAT_1_19= 0hex01 AND PB_1_19=DDT[SIN_1_19@SOUT_1_19] ENDIF);
ASSERT(IF SIN_1_20= 0hex0 THEN SAT_1_20= 0hex00 AND PB_1_20=0bin00000000 ELSE SAT_1_20= 0hex01 AND PB_1_20=DDT[SIN_1_20@SOUT_1_20] ENDIF);
ASSERT(IF SIN_1_21= 0hex0 THEN SAT_1_21= 0hex00 AND PB_1_21=0bin00000000 ELSE SAT_1_21= 0hex01 AND PB_1_21=DDT[SIN_1_21@SOUT_1_21] ENDIF);
ASSERT(IF SIN_1_22= 0hex0 THEN SAT_1_22= 0hex00 AND PB_1_22=0bin00000000 ELSE SAT_1_22= 0hex01 AND PB_1_22=DDT[SIN_1_22@SOUT_1_22] ENDIF);
ASSERT(IF SIN_1_23= 0hex0 THEN SAT_1_23= 0hex00 AND PB_1_23=0bin00000000 ELSE SAT_1_23= 0hex01 AND PB_1_23=DDT[SIN_1_23@SOUT_1_23] ENDIF);
ASSERT(IF SIN_1_24= 0hex0 THEN SAT_1_24= 0hex00 AND PB_1_24=0bin00000000 ELSE SAT_1_24= 0hex01 AND PB_1_24=DDT[SIN_1_24@SOUT_1_24] ENDIF);
ASSERT(IF SIN_1_25= 0hex0 THEN SAT_1_25= 0hex00 AND PB_1_25=0bin00000000 ELSE SAT_1_25= 0hex01 AND PB_1_25=DDT[SIN_1_25@SOUT_1_25] ENDIF);
ASSERT(IF SIN_1_26= 0hex0 THEN SAT_1_26= 0hex00 AND PB_1_26=0bin00000000 ELSE SAT_1_26= 0hex01 AND PB_1_26=DDT[SIN_1_26@SOUT_1_26] ENDIF);
ASSERT(IF SIN_1_27= 0hex0 THEN SAT_1_27= 0hex00 AND PB_1_27=0bin00000000 ELSE SAT_1_27= 0hex01 AND PB_1_27=DDT[SIN_1_27@SOUT_1_27] ENDIF);
ASSERT(IF SIN_1_28= 0hex0 THEN SAT_1_28= 0hex00 AND PB_1_28=0bin00000000 ELSE SAT_1_28= 0hex01 AND PB_1_28=DDT[SIN_1_28@SOUT_1_28] ENDIF);
ASSERT(IF SIN_1_29= 0hex0 THEN SAT_1_29= 0hex00 AND PB_1_29=0bin00000000 ELSE SAT_1_29= 0hex01 AND PB_1_29=DDT[SIN_1_29@SOUT_1_29] ENDIF);
ASSERT(IF SIN_1_30= 0hex0 THEN SAT_1_30= 0hex00 AND PB_1_30=0bin00000000 ELSE SAT_1_30= 0hex01 AND PB_1_30=DDT[SIN_1_30@SOUT_1_30] ENDIF);
ASSERT(IF SIN_1_31= 0hex0 THEN SAT_1_31= 0hex00 AND PB_1_31=0bin00000000 ELSE SAT_1_31= 0hex01 AND PB_1_31=DDT[SIN_1_31@SOUT_1_31] ENDIF);
ASSERT(count_1=BVPLUS(8,SAT_1_0,SAT_1_1,SAT_1_2,SAT_1_3,SAT_1_4,SAT_1_5,SAT_1_6,SAT_1_7,SAT_1_8,SAT_1_9,SAT_1_10,SAT_1_11,SAT_1_12,SAT_1_13,SAT_1_14,SAT_1_15,SAT_1_16,SAT_1_17,SAT_1_18,SAT_1_19,SAT_1_20,SAT_1_21,SAT_1_22,SAT_1_23,SAT_1_24,SAT_1_25,SAT_1_26,SAT_1_27,SAT_1_28,SAT_1_29,SAT_1_30,SAT_1_31));
ASSERT(P_1=BVPLUS(8,PB_1_0,PB_1_1,PB_1_2,PB_1_3,PB_1_4,PB_1_5,PB_1_6,PB_1_7,PB_1_8,PB_1_9,PB_1_10,PB_1_11,PB_1_12,PB_1_13,PB_1_14,PB_1_15,PB_1_16,PB_1_17,PB_1_18,PB_1_19,PB_1_20,PB_1_21,PB_1_22,PB_1_23,PB_1_24,PB_1_25,PB_1_26,PB_1_27,PB_1_28,PB_1_29,PB_1_30,PB_1_31));
ASSERT(IF SIN_2_0= 0hex0 THEN SAT_2_0= 0hex00 AND PB_2_0=0bin00000000 ELSE SAT_2_0= 0hex01 AND PB_2_0=DDT[SIN_2_0@SOUT_2_0] ENDIF);
ASSERT(IF SIN_2_1= 0hex0 THEN SAT_2_1= 0hex00 AND PB_2_1=0bin00000000 ELSE SAT_2_1= 0hex01 AND PB_2_1=DDT[SIN_2_1@SOUT_2_1] ENDIF);
ASSERT(IF SIN_2_2= 0hex0 THEN SAT_2_2= 0hex00 AND PB_2_2=0bin00000000 ELSE SAT_2_2= 0hex01 AND PB_2_2=DDT[SIN_2_2@SOUT_2_2] ENDIF);
ASSERT(IF SIN_2_3= 0hex0 THEN SAT_2_3= 0hex00 AND PB_2_3=0bin00000000 ELSE SAT_2_3= 0hex01 AND PB_2_3=DDT[SIN_2_3@SOUT_2_3] ENDIF);
ASSERT(IF SIN_2_4= 0hex0 THEN SAT_2_4= 0hex00 AND PB_2_4=0bin00000000 ELSE SAT_2_4= 0hex01 AND PB_2_4=DDT[SIN_2_4@SOUT_2_4] ENDIF);
ASSERT(IF SIN_2_5= 0hex0 THEN SAT_2_5= 0hex00 AND PB_2_5=0bin00000000 ELSE SAT_2_5= 0hex01 AND PB_2_5=DDT[SIN_2_5@SOUT_2_5] ENDIF);
ASSERT(IF SIN_2_6= 0hex0 THEN SAT_2_6= 0hex00 AND PB_2_6=0bin00000000 ELSE SAT_2_6= 0hex01 AND PB_2_6=DDT[SIN_2_6@SOUT_2_6] ENDIF);
ASSERT(IF SIN_2_7= 0hex0 THEN SAT_2_7= 0hex00 AND PB_2_7=0bin00000000 ELSE SAT_2_7= 0hex01 AND PB_2_7=DDT[SIN_2_7@SOUT_2_7] ENDIF);
ASSERT(IF SIN_2_8= 0hex0 THEN SAT_2_8= 0hex00 AND PB_2_8=0bin00000000 ELSE SAT_2_8= 0hex01 AND PB_2_8=DDT[SIN_2_8@SOUT_2_8] ENDIF);
ASSERT(IF SIN_2_9= 0hex0 THEN SAT_2_9= 0hex00 AND PB_2_9=0bin00000000 ELSE SAT_2_9= 0hex01 AND PB_2_9=DDT[SIN_2_9@SOUT_2_9] ENDIF);
ASSERT(IF SIN_2_10= 0hex0 THEN SAT_2_10= 0hex00 AND PB_2_10=0bin00000000 ELSE SAT_2_10= 0hex01 AND PB_2_10=DDT[SIN_2_10@SOUT_2_10] ENDIF);
ASSERT(IF SIN_2_11= 0hex0 THEN SAT_2_11= 0hex00 AND PB_2_11=0bin00000000 ELSE SAT_2_11= 0hex01 AND PB_2_11=DDT[SIN_2_11@SOUT_2_11] ENDIF);
ASSERT(IF SIN_2_12= 0hex0 THEN SAT_2_12= 0hex00 AND PB_2_12=0bin00000000 ELSE SAT_2_12= 0hex01 AND PB_2_12=DDT[SIN_2_12@SOUT_2_12] ENDIF);
ASSERT(IF SIN_2_13= 0hex0 THEN SAT_2_13= 0hex00 AND PB_2_13=0bin00000000 ELSE SAT_2_13= 0hex01 AND PB_2_13=DDT[SIN_2_13@SOUT_2_13] ENDIF);
ASSERT(IF SIN_2_14= 0hex0 THEN SAT_2_14= 0hex00 AND PB_2_14=0bin00000000 ELSE SAT_2_14= 0hex01 AND PB_2_14=DDT[SIN_2_14@SOUT_2_14] ENDIF);
ASSERT(IF SIN_2_15= 0hex0 THEN SAT_2_15= 0hex00 AND PB_2_15=0bin00000000 ELSE SAT_2_15= 0hex01 AND PB_2_15=DDT[SIN_2_15@SOUT_2_15] ENDIF);
ASSERT(IF SIN_2_16= 0hex0 THEN SAT_2_16= 0hex00 AND PB_2_16=0bin00000000 ELSE SAT_2_16= 0hex01 AND PB_2_16=DDT[SIN_2_16@SOUT_2_16] ENDIF);
ASSERT(IF SIN_2_17= 0hex0 THEN SAT_2_17= 0hex00 AND PB_2_17=0bin00000000 ELSE SAT_2_17= 0hex01 AND PB_2_17=DDT[SIN_2_17@SOUT_2_17] ENDIF);
ASSERT(IF SIN_2_18= 0hex0 THEN SAT_2_18= 0hex00 AND PB_2_18=0bin00000000 ELSE SAT_2_18= 0hex01 AND PB_2_18=DDT[SIN_2_18@SOUT_2_18] ENDIF);
ASSERT(IF SIN_2_19= 0hex0 THEN SAT_2_19= 0hex00 AND PB_2_19=0bin00000000 ELSE SAT_2_19= 0hex01 AND PB_2_19=DDT[SIN_2_19@SOUT_2_19] ENDIF);
ASSERT(IF SIN_2_20= 0hex0 THEN SAT_2_20= 0hex00 AND PB_2_20=0bin00000000 ELSE SAT_2_20= 0hex01 AND PB_2_20=DDT[SIN_2_20@SOUT_2_20] ENDIF);
ASSERT(IF SIN_2_21= 0hex0 THEN SAT_2_21= 0hex00 AND PB_2_21=0bin00000000 ELSE SAT_2_21= 0hex01 AND PB_2_21=DDT[SIN_2_21@SOUT_2_21] ENDIF);
ASSERT(IF SIN_2_22= 0hex0 THEN SAT_2_22= 0hex00 AND PB_2_22=0bin00000000 ELSE SAT_2_22= 0hex01 AND PB_2_22=DDT[SIN_2_22@SOUT_2_22] ENDIF);
ASSERT(IF SIN_2_23= 0hex0 THEN SAT_2_23= 0hex00 AND PB_2_23=0bin00000000 ELSE SAT_2_23= 0hex01 AND PB_2_23=DDT[SIN_2_23@SOUT_2_23] ENDIF);
ASSERT(IF SIN_2_24= 0hex0 THEN SAT_2_24= 0hex00 AND PB_2_24=0bin00000000 ELSE SAT_2_24= 0hex01 AND PB_2_24=DDT[SIN_2_24@SOUT_2_24] ENDIF);
ASSERT(IF SIN_2_25= 0hex0 THEN SAT_2_25= 0hex00 AND PB_2_25=0bin00000000 ELSE SAT_2_25= 0hex01 AND PB_2_25=DDT[SIN_2_25@SOUT_2_25] ENDIF);
ASSERT(IF SIN_2_26= 0hex0 THEN SAT_2_26= 0hex00 AND PB_2_26=0bin00000000 ELSE SAT_2_26= 0hex01 AND PB_2_26=DDT[SIN_2_26@SOUT_2_26] ENDIF);
ASSERT(IF SIN_2_27= 0hex0 THEN SAT_2_27= 0hex00 AND PB_2_27=0bin00000000 ELSE SAT_2_27= 0hex01 AND PB_2_27=DDT[SIN_2_27@SOUT_2_27] ENDIF);
ASSERT(IF SIN_2_28= 0hex0 THEN SAT_2_28= 0hex00 AND PB_2_28=0bin00000000 ELSE SAT_2_28= 0hex01 AND PB_2_28=DDT[SIN_2_28@SOUT_2_28] ENDIF);
ASSERT(IF SIN_2_29= 0hex0 THEN SAT_2_29= 0hex00 AND PB_2_29=0bin00000000 ELSE SAT_2_29= 0hex01 AND PB_2_29=DDT[SIN_2_29@SOUT_2_29] ENDIF);
ASSERT(IF SIN_2_30= 0hex0 THEN SAT_2_30= 0hex00 AND PB_2_30=0bin00000000 ELSE SAT_2_30= 0hex01 AND PB_2_30=DDT[SIN_2_30@SOUT_2_30] ENDIF);
ASSERT(IF SIN_2_31= 0hex0 THEN SAT_2_31= 0hex00 AND PB_2_31=0bin00000000 ELSE SAT_2_31= 0hex01 AND PB_2_31=DDT[SIN_2_31@SOUT_2_31] ENDIF);
ASSERT(count_2=BVPLUS(8,SAT_2_0,SAT_2_1,SAT_2_2,SAT_2_3,SAT_2_4,SAT_2_5,SAT_2_6,SAT_2_7,SAT_2_8,SAT_2_9,SAT_2_10,SAT_2_11,SAT_2_12,SAT_2_13,SAT_2_14,SAT_2_15,SAT_2_16,SAT_2_17,SAT_2_18,SAT_2_19,SAT_2_20,SAT_2_21,SAT_2_22,SAT_2_23,SAT_2_24,SAT_2_25,SAT_2_26,SAT_2_27,SAT_2_28,SAT_2_29,SAT_2_30,SAT_2_31));
ASSERT(P_2=BVPLUS(8,PB_2_0,PB_2_1,PB_2_2,PB_2_3,PB_2_4,PB_2_5,PB_2_6,PB_2_7,PB_2_8,PB_2_9,PB_2_10,PB_2_11,PB_2_12,PB_2_13,PB_2_14,PB_2_15,PB_2_16,PB_2_17,PB_2_18,PB_2_19,PB_2_20,PB_2_21,PB_2_22,PB_2_23,PB_2_24,PB_2_25,PB_2_26,PB_2_27,PB_2_28,PB_2_29,PB_2_30,PB_2_31));
ASSERT(IF SIN_3_0= 0hex0 THEN SAT_3_0= 0hex00 AND PB_3_0=0bin00000000 ELSE SAT_3_0= 0hex01 AND PB_3_0=DDT[SIN_3_0@SOUT_3_0] ENDIF);
ASSERT(IF SIN_3_1= 0hex0 THEN SAT_3_1= 0hex00 AND PB_3_1=0bin00000000 ELSE SAT_3_1= 0hex01 AND PB_3_1=DDT[SIN_3_1@SOUT_3_1] ENDIF);
ASSERT(IF SIN_3_2= 0hex0 THEN SAT_3_2= 0hex00 AND PB_3_2=0bin00000000 ELSE SAT_3_2= 0hex01 AND PB_3_2=DDT[SIN_3_2@SOUT_3_2] ENDIF);
ASSERT(IF SIN_3_3= 0hex0 THEN SAT_3_3= 0hex00 AND PB_3_3=0bin00000000 ELSE SAT_3_3= 0hex01 AND PB_3_3=DDT[SIN_3_3@SOUT_3_3] ENDIF);
ASSERT(IF SIN_3_4= 0hex0 THEN SAT_3_4= 0hex00 AND PB_3_4=0bin00000000 ELSE SAT_3_4= 0hex01 AND PB_3_4=DDT[SIN_3_4@SOUT_3_4] ENDIF);
ASSERT(IF SIN_3_5= 0hex0 THEN SAT_3_5= 0hex00 AND PB_3_5=0bin00000000 ELSE SAT_3_5= 0hex01 AND PB_3_5=DDT[SIN_3_5@SOUT_3_5] ENDIF);
ASSERT(IF SIN_3_6= 0hex0 THEN SAT_3_6= 0hex00 AND PB_3_6=0bin00000000 ELSE SAT_3_6= 0hex01 AND PB_3_6=DDT[SIN_3_6@SOUT_3_6] ENDIF);
ASSERT(IF SIN_3_7= 0hex0 THEN SAT_3_7= 0hex00 AND PB_3_7=0bin00000000 ELSE SAT_3_7= 0hex01 AND PB_3_7=DDT[SIN_3_7@SOUT_3_7] ENDIF);
ASSERT(IF SIN_3_8= 0hex0 THEN SAT_3_8= 0hex00 AND PB_3_8=0bin00000000 ELSE SAT_3_8= 0hex01 AND PB_3_8=DDT[SIN_3_8@SOUT_3_8] ENDIF);
ASSERT(IF SIN_3_9= 0hex0 THEN SAT_3_9= 0hex00 AND PB_3_9=0bin00000000 ELSE SAT_3_9= 0hex01 AND PB_3_9=DDT[SIN_3_9@SOUT_3_9] ENDIF);
ASSERT(IF SIN_3_10= 0hex0 THEN SAT_3_10= 0hex00 AND PB_3_10=0bin00000000 ELSE SAT_3_10= 0hex01 AND PB_3_10=DDT[SIN_3_10@SOUT_3_10] ENDIF);
ASSERT(IF SIN_3_11= 0hex0 THEN SAT_3_11= 0hex00 AND PB_3_11=0bin00000000 ELSE SAT_3_11= 0hex01 AND PB_3_11=DDT[SIN_3_11@SOUT_3_11] ENDIF);
ASSERT(IF SIN_3_12= 0hex0 THEN SAT_3_12= 0hex00 AND PB_3_12=0bin00000000 ELSE SAT_3_12= 0hex01 AND PB_3_12=DDT[SIN_3_12@SOUT_3_12] ENDIF);
ASSERT(IF SIN_3_13= 0hex0 THEN SAT_3_13= 0hex00 AND PB_3_13=0bin00000000 ELSE SAT_3_13= 0hex01 AND PB_3_13=DDT[SIN_3_13@SOUT_3_13] ENDIF);
ASSERT(IF SIN_3_14= 0hex0 THEN SAT_3_14= 0hex00 AND PB_3_14=0bin00000000 ELSE SAT_3_14= 0hex01 AND PB_3_14=DDT[SIN_3_14@SOUT_3_14] ENDIF);
ASSERT(IF SIN_3_15= 0hex0 THEN SAT_3_15= 0hex00 AND PB_3_15=0bin00000000 ELSE SAT_3_15= 0hex01 AND PB_3_15=DDT[SIN_3_15@SOUT_3_15] ENDIF);
ASSERT(IF SIN_3_16= 0hex0 THEN SAT_3_16= 0hex00 AND PB_3_16=0bin00000000 ELSE SAT_3_16= 0hex01 AND PB_3_16=DDT[SIN_3_16@SOUT_3_16] ENDIF);
ASSERT(IF SIN_3_17= 0hex0 THEN SAT_3_17= 0hex00 AND PB_3_17=0bin00000000 ELSE SAT_3_17= 0hex01 AND PB_3_17=DDT[SIN_3_17@SOUT_3_17] ENDIF);
ASSERT(IF SIN_3_18= 0hex0 THEN SAT_3_18= 0hex00 AND PB_3_18=0bin00000000 ELSE SAT_3_18= 0hex01 AND PB_3_18=DDT[SIN_3_18@SOUT_3_18] ENDIF);
ASSERT(IF SIN_3_19= 0hex0 THEN SAT_3_19= 0hex00 AND PB_3_19=0bin00000000 ELSE SAT_3_19= 0hex01 AND PB_3_19=DDT[SIN_3_19@SOUT_3_19] ENDIF);
ASSERT(IF SIN_3_20= 0hex0 THEN SAT_3_20= 0hex00 AND PB_3_20=0bin00000000 ELSE SAT_3_20= 0hex01 AND PB_3_20=DDT[SIN_3_20@SOUT_3_20] ENDIF);
ASSERT(IF SIN_3_21= 0hex0 THEN SAT_3_21= 0hex00 AND PB_3_21=0bin00000000 ELSE SAT_3_21= 0hex01 AND PB_3_21=DDT[SIN_3_21@SOUT_3_21] ENDIF);
ASSERT(IF SIN_3_22= 0hex0 THEN SAT_3_22= 0hex00 AND PB_3_22=0bin00000000 ELSE SAT_3_22= 0hex01 AND PB_3_22=DDT[SIN_3_22@SOUT_3_22] ENDIF);
ASSERT(IF SIN_3_23= 0hex0 THEN SAT_3_23= 0hex00 AND PB_3_23=0bin00000000 ELSE SAT_3_23= 0hex01 AND PB_3_23=DDT[SIN_3_23@SOUT_3_23] ENDIF);
ASSERT(IF SIN_3_24= 0hex0 THEN SAT_3_24= 0hex00 AND PB_3_24=0bin00000000 ELSE SAT_3_24= 0hex01 AND PB_3_24=DDT[SIN_3_24@SOUT_3_24] ENDIF);
ASSERT(IF SIN_3_25= 0hex0 THEN SAT_3_25= 0hex00 AND PB_3_25=0bin00000000 ELSE SAT_3_25= 0hex01 AND PB_3_25=DDT[SIN_3_25@SOUT_3_25] ENDIF);
ASSERT(IF SIN_3_26= 0hex0 THEN SAT_3_26= 0hex00 AND PB_3_26=0bin00000000 ELSE SAT_3_26= 0hex01 AND PB_3_26=DDT[SIN_3_26@SOUT_3_26] ENDIF);
ASSERT(IF SIN_3_27= 0hex0 THEN SAT_3_27= 0hex00 AND PB_3_27=0bin00000000 ELSE SAT_3_27= 0hex01 AND PB_3_27=DDT[SIN_3_27@SOUT_3_27] ENDIF);
ASSERT(IF SIN_3_28= 0hex0 THEN SAT_3_28= 0hex00 AND PB_3_28=0bin00000000 ELSE SAT_3_28= 0hex01 AND PB_3_28=DDT[SIN_3_28@SOUT_3_28] ENDIF);
ASSERT(IF SIN_3_29= 0hex0 THEN SAT_3_29= 0hex00 AND PB_3_29=0bin00000000 ELSE SAT_3_29= 0hex01 AND PB_3_29=DDT[SIN_3_29@SOUT_3_29] ENDIF);
ASSERT(IF SIN_3_30= 0hex0 THEN SAT_3_30= 0hex00 AND PB_3_30=0bin00000000 ELSE SAT_3_30= 0hex01 AND PB_3_30=DDT[SIN_3_30@SOUT_3_30] ENDIF);
ASSERT(IF SIN_3_31= 0hex0 THEN SAT_3_31= 0hex00 AND PB_3_31=0bin00000000 ELSE SAT_3_31= 0hex01 AND PB_3_31=DDT[SIN_3_31@SOUT_3_31] ENDIF);
ASSERT(count_3=BVPLUS(8,SAT_3_0,SAT_3_1,SAT_3_2,SAT_3_3,SAT_3_4,SAT_3_5,SAT_3_6,SAT_3_7,SAT_3_8,SAT_3_9,SAT_3_10,SAT_3_11,SAT_3_12,SAT_3_13,SAT_3_14,SAT_3_15,SAT_3_16,SAT_3_17,SAT_3_18,SAT_3_19,SAT_3_20,SAT_3_21,SAT_3_22,SAT_3_23,SAT_3_24,SAT_3_25,SAT_3_26,SAT_3_27,SAT_3_28,SAT_3_29,SAT_3_30,SAT_3_31));
ASSERT(P_3=BVPLUS(8,PB_3_0,PB_3_1,PB_3_2,PB_3_3,PB_3_4,PB_3_5,PB_3_6,PB_3_7,PB_3_8,PB_3_9,PB_3_10,PB_3_11,PB_3_12,PB_3_13,PB_3_14,PB_3_15,PB_3_16,PB_3_17,PB_3_18,PB_3_19,PB_3_20,PB_3_21,PB_3_22,PB_3_23,PB_3_24,PB_3_25,PB_3_26,PB_3_27,PB_3_28,PB_3_29,PB_3_30,PB_3_31));
ASSERT(counts=BVPLUS(8,count_0,count_1,count_2,count_3));
ASSERT(PR=BVPLUS(8,P_0,P_1,P_2,P_3));
ASSERT(counts=0bin00001111);
QUERY FALSE;
COUNTEREXAMPLE;
